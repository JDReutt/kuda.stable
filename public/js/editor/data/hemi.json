[{"funcs":[{"ret":{"type":"Object","desc":"the Octane structure representing the Loop"},"params":[],"desc":"Get the Octane structure for the Loop.","name":"toOctane"}],"props":[{"name":"name","desc":"The name of the Loop.","type":"string"},{"name":"startTime","desc":"The time in an Animation that the Loop begins at.","type":"number"},{"name":"stopTime","desc":"The time in an Animation that the Loop ends at.","type":"number"},{"name":"iterations","desc":"The number of times the Loop repeats.","type":"number"}],"desc":"A Loop contains a start time and stop time as well as the number of iterations to perform for the Loop.","name":"hemi.animation.Loop"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the Animation.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the Animation"},"params":[],"desc":"Get the Octane structure for the Animation.","name":"toOctane"},{"params":[{"type":"hemi.animation.Loop","name":"loop","desc":"the Loop to add"}],"desc":"Add the given Loop to the Animation.","name":"addLoop"},{"ret":{"type":"hemi.animation.Loop","desc":"the removed Loop or null"},"params":[{"type":"hemi.animation.Loop","name":"loop","desc":"the Loop to remove"}],"desc":"Remove the given Loop from the Animation.","name":"removeLoop"},{"params":[],"desc":"Check if the current time of the Animation needs to be reset by any of its Loops. If a Loop resets the current time, increment that Loop's iteration counter.","name":"checkLoops"},{"params":[],"desc":"Reset the Animation and its Loops to their initial states.","name":"reset"},{"params":[],"desc":"If the Animation's target is not currently animating, start the Animation.","name":"start"},{"params":[],"desc":"If the Animation is currently running, stop it.","name":"stop"},{"params":[{"type":"o3d.RenderEvent","name":"renderEvent","desc":"the event containing information about the render"}],"desc":"Update the Animation's current time with the amount of elapsed time in the RenderEvent. If the Animation has not yet ended, update the Animation's target with the current animation time. Otherwise end the Animation.","name":"onRender"},{"params":[{"type":"number","name":"currentTime","desc":"current animation time"}],"desc":"Update the target with the given animation time.","name":"updateTarget"}],"props":[{"type":"string","desc":"Overwrites hemi.world.Citizen.citizenType.","name":"citizenType"},{"name":"target","desc":"The target of the Animation. It should have an 'isAnimating' property.","type":"Object"},{"name":"beginTime","desc":"The time the Animation begins at.","type":"number"},{"name":"endTime","desc":"The time the Animation ends at.","type":"number"}],"parent":"hemi.world.Citizen","desc":"An Animation contains a target to animate, a begin time, an end time, and Loops for repeating sections of the Animation.","name":"hemi.animation.Animation"},{"funcs":[{"params":[{"type":"string","name":"url","desc":"the URL of the audio file"},{"type":"string","name":"type","desc":"the type of the audio file (ogg, mpeg, etc)"}],"desc":"Add the given URL as a source for the audio file to load.","name":"addUrl"},{"params":[],"desc":"Send a cleanup Message and remove all references in the Audio.","name":"cleanup"},{"ret":{"type":"number","desc":"length of media in seconds"},"params":[],"desc":"Get the length of the current audio media.","name":"getDuration"},{"ret":{"type":"number","desc":"the current volume"},"params":[],"desc":"Get the current volume of the audio media. Volume ranges from 0.0 to 1.0.","name":"getVolume"},{"params":[],"desc":"Pause the audio media if it is currently playing.","name":"pause"},{"params":[],"desc":"Play the audio media if it is not already doing so. If the media is in the middle of a seek operation, the Audio will wait until it finishes before playing.","name":"play"},{"params":[{"type":"string","name":"url","desc":"the URL to remove"}],"desc":"Remove the given URL as a source for the audio file to load.","name":"removeUrl"},{"params":[{"type":"number","name":"time","desc":"the time to seek to in seconds"}],"desc":"Set the audio media's current time to the given time. If the media is currently playing, it will pause until the seek operation finishes.","name":"seek"},{"params":[{"type":"boolean","name":"looping","desc":"flag to indicate if the media should loop"}],"desc":"Set if the audio media should loop when it ends.","name":"setLoop"},{"params":[{"type":"number","name":"volume","desc":"the volume to set"}],"desc":"Set the volume of the audio media. Volume ranges from 0.0 to 1.0.","name":"setVolume"},{"ret":{"type":"Object","desc":"the Octane structure representing the Audio"},"params":[],"desc":"Get the Octane structure for the Audio.","name":"toOctane"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"An Audio contains an audio DOM element that can be played, paused, etc.","name":"hemi.audio.Audio"},{"funcs":[],"props":[{"name":"min","desc":"The minimum XYZ point","type":"number[3]"},{"name":"max","desc":"The maximum XYZ point","type":"number[3]"}],"desc":"A Box is defined by a minimum XYZ point and a maximum XYZ point.","name":"hemi.curve.Box"},{"funcs":[],"props":[{"name":"key","desc":"The time when the ColorKey is 100% of the Curve's color value.","type":"number"},{"name":"value","desc":"The color value for Curve particles.","type":"number[4]"}],"desc":"A ColorKey contains a time key and a color value.","name":"hemi.curve.ColorKey"},{"funcs":[],"props":[{"name":"key","desc":"The time when the ScaleKey is 100% of the Curve's scale value.","type":"number"},{"name":"value","desc":"The scale value for Curve particles.","type":"number[3]"}],"desc":"A ScaleKey contains a time key and a scale value.","name":"hemi.curve.ScaleKey"},{"funcs":[{"ret":{"type":"Object","desc":"the Octane structure representing the Curve"},"params":[],"desc":"Get the Octane structure for the Curve.","name":"toOctane"},{"params":[{"type":"Object","name":"cfg","desc":"configuration options for the Curve"}],"desc":"Load the given configuration options into the Curve.","name":"loadConfig"},{"ret":{"type":"number[3]","desc":"the position interpolated from the time input"},"params":[{"type":"number","name":"t","desc":"time, usually between 0 and 1"}],"desc":"Base interpolation function for this curve. Usually overwritten.","name":"interpolate"},{"ret":{"type":"number[3]","desc":"the position linearly interpolated from the time input"},"params":[{"type":"number","name":"t","desc":"time, usually between 0 and 1"}],"desc":"The linear interpolation moves on a straight line between waypoints.","name":"linear"},{"ret":{"type":"number[3]","desc":"the position interpolated from the time input by a bezier function."},"params":[{"type":"number","name":"t","desc":"time, usually between 0 and 1"}],"desc":"The bezier interpolation starts at the first waypoint, and ends at the last waypoint, and 'bends' toward the intermediate points. These points can be weighted for more bending.","name":"bezier"},{"ret":{"type":"number[3]","desc":"the position interpolated from the time input by the cubic hermite function."},"params":[{"type":"number","name":"t","desc":"time, usually between 0 and 1"}],"desc":"The cubic hermite function interpolates along a line that runs through the Curve's waypoints at a predefined tangent slope through each one.","name":"cubicHermite"},{"ret":{"type":"number[3]","desc":"the position linearly interpolated from the time input, normalized to keep the velocity constant"},"params":[{"type":"number","name":"t","desc":"time, usually between 0 and 1"}],"desc":"The normalized linear interpolation moves on a straight line between waypoints at a constant velocity.","name":"linearNorm"},{"params":[],"desc":"Calculate the tangents for a cardinal curve, which is a cubic hermite curve where the tangents are defined by a single 'tension' factor.","name":"setTangents"},{"params":[{"type":"hemi.curve.CurveType","name":"type","desc":"interpolation type"}],"desc":"Set the type of interpolation for the Curve.","name":"setType"},{"ret":{"type":"number[3]","desc":"the position of the last waypoint"},"params":[],"desc":"Get the XYZ position of the last waypoint of the Curve.","name":"getEnd"},{"ret":{"type":"number[3]","desc":"the position of the first waypoint"},"params":[],"desc":"Get the XYZ position of the first waypoint of the Curve.","name":"getStart"},{"params":[{"type":"number","name":"samples","desc":"the number of samples to use to draw"},{"type":"Object","name":"config","desc":"configuration for how the Curve should look"}],"desc":"Draw the Curve using primitive shapes.","name":"draw"}],"props":[],"desc":"A Curve is used to represent and calculate different curves including: linear, bezier, cardinal, and cubic hermite.","name":"hemi.curve.Curve"},{"funcs":[{"params":[{"type":"number","name":"loops","desc":"the number of loops to do"}],"desc":"Start this particle along the curve.","name":"run"},{"params":[{"type":"o3d.Shape","name":"shape","desc":"the shape to add"}],"desc":"Add a shape to the particle Transform.","name":"addShape"},{"params":[],"desc":"Remove all shapes from the particle transform.","name":"removeShapes"},{"params":[{"type":"hemi.curve.ColorKey[]","name":"colorKeys","desc":"array of color key pairs"}],"desc":"Set the color gradient of this Particle.","name":"setColors"},{"params":[{"type":"hemi.curve.ScaleKey[]","name":"scaleKeys","desc":"array of scale key pairs"}],"desc":"Set the scale gradient of this particle.","name":"setScales"},{"params":[{"type":"number","name":"x","desc":"x translation"},{"type":"number","name":"y","desc":"y translation"},{"type":"number","name":"z","desc":"z translation"}],"desc":"Translate the Particle transform in local space.","name":"translate"},{"ret":{"type":"number[]","desc":"the interpolated value"},"params":[{"type":"number","name":"time","desc":"time, from 0 to 1"},{"type":"Object[]","name":"keySet","desc":"array of key-value pairs"}],"desc":"Given a set of key-values, return the interpolated value","name":"lerpValue"},{"params":[],"desc":"Update the particle (called on each render).","name":"update"},{"params":[],"desc":"Destroy this particle and all references to it.","name":"destroy"},{"params":[],"desc":"Reset this particle.","name":"reset"}],"props":[],"desc":"A Particle allows a Transform to move along a set of points.","name":"hemi.curve.Particle"},{"funcs":[{"params":[],"desc":"Start the system.","name":"start"},{"params":[{"type":"boolean","name":"opt_hard","desc":"If true, remove all particles immediately. Otherwise, stop emitting but let existing particles finish."}],"desc":"Stop the system.","name":"stop"},{"params":[{"type":"o3d.RenderEvent","name":"event","desc":"event object describing details of the render loop"}],"desc":"Update all existing particles on each render and emit new ones if needed.","name":"onRender"},{"ret":{"type":"hemi.curve.Curve","desc":"the randomly generated Curve"},"params":[{"type":"number","name":"tension","desc":"tension parameter for the Curve"}],"desc":"Generate a new curve running through the system's bounding boxes.","name":"newCurve"},{"params":[],"desc":"Remove all shapes from all particles in the system.","name":"removeShapes"},{"params":[{"type":"number|o3d.Shape","name":"shape","desc":"either an enum for standard shapes, or a custom predefined shape to add"}],"desc":"Add a shape which will be added to the Transform of every particle.","name":"addShape"},{"ret":{"type":"number","desc":"the new rate"},"params":[{"type":"number","name":"delta","desc":"the delta by which to change the rate"}],"desc":"Change the rate at which particles are emitted.","name":"changeRate"},{"ret":{"type":"number","desc":"the new rate - may be different because of bounds"},"params":[{"type":"number","name":"rate","desc":"the rate at which to emit particles"}],"desc":"Set the emit rate of the system.","name":"setRate"},{"ret":{"type":"hemi.curve.ParticleSystem","desc":"this system, for chaining"},"params":[{"type":"hemi.curve.ColorKey[]","name":"colorKeys","desc":"array of color key pairs"}],"desc":"Set the color gradient for this particle system.","name":"setColors"},{"ret":{"type":"hemi.curve.ParticleSystem","desc":"this system, for chaining"},"params":[{"type":"hemi.curve.ScaleKey[]","name":"scaleKeys","desc":"array of scale key pairs"}],"desc":"Set the scale gradient for this particle system.","name":"setScales"},{"params":[],"desc":"Render the bounding boxes which the particle system's curves run through (helpful for debugging).","name":"showBoxes"},{"params":[],"desc":"Hide the particle system's bounding boxes from view.","name":"hideBoxes"},{"params":[{"type":"number","name":"x","desc":"amount to translate in the X direction"},{"type":"number","name":"y","desc":"amount to translate in the Y direction"},{"type":"number","name":"z","desc":"amount to translate in the Z direction"}],"desc":"Translate the entire particle system by the given amounts","name":"translate"}],"props":[],"desc":"A ParticleSystem manages a set of Particle objects, and fires them at the appropriate intervals.","name":"hemi.curve.ParticleSystem"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the GpuParticleSystem.","name":"cleanup"},{"params":[],"desc":"Hide the particle system's bounding boxes from view.","name":"hideBoxes"},{"params":[{"type":"Object","name":"cfg","desc":"configuration object"}],"desc":"Load the given configuration object and set up the GpuParticleSystem.","name":"loadConfig"},{"params":[{"type":"o3d.RenderEvent","name":"e","desc":"the render event"}],"desc":"Update the particles on each render.","name":"onRender"},{"params":[],"desc":"Pause the particle system.","name":"pause"},{"params":[],"desc":"Resume the particle system.","name":"play"},{"params":[{"type":"boolean","name":"aim","desc":"flag indicating if particles should aim"}],"desc":"Set whether or not particles should orient themselves along the curve they are following.","name":"setAim"},{"params":[{"type":"hemi.curve.Box[]","name":"boxes","desc":"array of boxes defining volumetric waypoints for the particle system"}],"desc":"Set the bounding boxes that define waypoints for the particle system's curves.","name":"setBoxes"},{"params":[{"type":"number[4][]","name":"colors","desc":"array of RGBA color values"}],"desc":"Set the color ramp for the particles as they travel along the curve.","name":"setColors"},{"params":[{"type":"hemi.curve.ColorKey[]","name":"colorKeys","desc":"array of color keys, sorted into ascending key order"}],"desc":"Set the color ramp for the particles as they travel along the curve, specifying the interpolation times for each color.","name":"setColorKeys"},{"params":[{"type":"number","name":"life","desc":"the lifetime of the system in seconds"}],"desc":"Set the lifetime of the particle system.","name":"setLife"},{"params":[{"type":"o3d.Material","name":"material","desc":"the material to use for particles"}],"desc":"Set the material to use for the particles. Note that the material's shader will be modified for the particle system.","name":"setMaterial"},{"params":[{"type":"number","name":"numPtcs","desc":"number of particles"}],"desc":"Set the total number of particles for the system to create.","name":"setParticleCount"},{"params":[{"type":"number","name":"size","desc":"size of the particles"}],"desc":"Set the size of each individual particle. For example, this would be the radius if the particles are spheres.","name":"setParticleSize"},{"params":[{"type":"hemi.curve.ShapeType","name":"type","desc":"the type of shape to use"}],"desc":"Set the shape of the particles to one of the predefined shapes. This may take some time as a new vertex buffer gets created.","name":"setParticleShape"},{"params":[{"type":"number[3][]","name":"scales","desc":"array of XYZ scale values"}],"desc":"Set the scale ramp for the particles as they travel along the curve.","name":"setScales"},{"params":[{"type":"hemi.curve.ScaleKey[]","name":"scaleKeys","desc":"array of scale keys, sorted into ascending key order"}],"desc":"Set the scale ramp for the particles as they travel along the curve, specifying the interpolation times for each scale.","name":"setScaleKeys"},{"params":[{"type":"number","name":"tension","desc":"tension value (typically from -1 to 1)"}],"desc":"Set the tension parameter for the curve. This controls how round or straight the curve sections are.","name":"setTension"},{"params":[],"desc":"Modify the particle material's shaders so that the particle system can be rendered using its current configuration. At a minimum, the material, custom texture index, and curve boxes need to be defined.","name":"setupShaders"},{"params":[],"desc":"Render the bounding boxes which the particle system's curves run through (helpful for debugging).","name":"showBoxes"},{"params":[],"desc":"Start the particle system.","name":"start"},{"params":[],"desc":"Stop the particle system.","name":"stop"},{"ret":{"type":"Object","desc":"the Octane structure representing the GpuParticleSystem"},"params":[],"desc":"Get the Octane structure for the GpuParticleSystem.","name":"toOctane"},{"params":[{"type":"number","name":"x","desc":"amount to translate in the X direction"},{"type":"number","name":"y","desc":"amount to translate in the Y direction"},{"type":"number","name":"z","desc":"amount to translate in the Z direction"}],"desc":"Translate the entire particle system by the given amounts","name":"translate"}],"props":[{"type":"string","desc":"Overwrites hemi.world.Citizen.citizenType.","name":"citizenType"}],"desc":"A particle system that is GPU driven.","name":"hemi.curve.GpuParticleSystem"},{"funcs":[{"params":[{"type":"o3d.RenderEvent","name":"e","desc":"the render event"}],"desc":"Update the particles on each render.","name":"onRender"},{"params":[],"desc":"Resume the particle system.","name":"play"},{"params":[],"desc":"Start the particle system.","name":"start"},{"params":[],"desc":"Stop the particle system.","name":"stop"}],"props":[],"desc":"A GPU driven particle system that has trailing starts and stops.","name":"hemi.curve.GpuParticleTrail"},{"funcs":[],"props":[{"name":"src","desc":"The Message originator.","type":"hemi.world.Citizen"},{"name":"msg","desc":"The type of the Message.","type":"string"},{"name":"data","desc":"Container for any and all Message data.","type":"Object"}],"desc":"A Message is sent whenever an event occurs.","name":"hemi.dispatch.Message"},{"funcs":[{"params":[],"desc":"Clean up the MessageSpec so all references in it are removed.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the MessageSpec"},"params":[],"desc":"Get the Octane structure for the MessageSpec.","name":"toOctane"},{"params":[{"type":"hemi.dispatch.MessageTarget","name":"target","desc":"the target to add"}],"desc":"Register the given MessageTarget with the MessageSpec.","name":"addTarget"},{"ret":{"type":"hemi.dispatch.MessageTarget","desc":"the removed target or null"},"params":[{"type":"hemi.dispatch.MessageTarget","name":"target","desc":"the target to remove"}],"desc":"Remove the given MessageTarget from the MessageSpec.","name":"removeTarget"},{"ret":{"type":"string","desc":"the hash key"},"params":[],"desc":"Get the unique hash key for the MessageSpec.","name":"getHash"}],"props":[{"name":"src","desc":"The id of the Message originator to handle Messages from. This can also be hemi.dispatch.WILDCARD to match all source ids.","type":"number"},{"name":"msg","desc":"The type of Message to handle. This can also be hemi.dispatch.WILDCARD to match all Message types.","type":"string"},{"name":"targets","desc":"The MessageTargets to pass Messages with matching source ids and types.","type":"hemi.dispatch.MessageTarget[]"}],"desc":"A MessageSpec specifies a certain Message type and source and contains a set of MessageTargets that have registered to receive Messages with matching specs.","name":"hemi.dispatch.MessageSpec"},{"funcs":[{"params":[],"desc":"Clean up the MessageTarget so all references in it are removed.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the MessageTarget"},"params":[],"desc":"Get the Octane structure for the MessageTarget.","name":"toOctane"}],"props":[{"name":"dispatchId","desc":"The id of the MessageTarget.","type":"number"},{"name":"name","desc":"The name of the MessageTarget.","type":"string"},{"name":"handler","desc":"The handler for Messages passed through a MessageSpec. It may be an object or function.","type":"Object || function"},{"name":"func","desc":"The name of the object function to call if handler is an object.","type":"string"},{"name":"args","desc":"Optional array to specify arguments to pass to the handler. Otherwise just pass it the Message.","type":"string[]"}],"desc":"A MessageTarget registers with a MessageSpec to receive Messages that match its attributes.","name":"hemi.dispatch.MessageTarget"},{"funcs":[{"ret":{"type":"Object","desc":"the Octane structure representing the ParticleFunction"},"params":[],"desc":"Get the Octane structure for the ParticleFunction.","name":"toOctane"}],"props":[{"name":"name","desc":"The name of the predefined parameter setting function.","type":"hemi.effect.ParticleFunctions"},{"name":"options","desc":"A set of options to customize values that the function uses to calculate the particle parameters.","type":"Object"}],"desc":"A ParticleFunction specifies a predefined per-particle parameter setting function and any properties it might require.","name":"hemi.effect.ParticleFunction"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the Effect.","name":"cleanup"},{"params":[],"desc":"Set the particle emitter up for the Effect. Implementing subclasses should override this.","name":"setup"},{"ret":{"type":"Object","desc":"the Octane structure representing the Effect"},"params":[],"desc":"Get the Octane structure for the Effect.","name":"toOctane"}],"props":[{"type":"string","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"},{"name":"state","desc":"The particle state to use for drawing.","type":"hemi.core.particles.ParticleStateIds"},{"name":"colorRamp","desc":"An array of colors for each particle to transition through. Each color value is in the form RGBA.","type":"number[4][]"},{"name":"params","desc":"A set of parameters for the particle emitter.","type":"hemi.core.particles.ParticleSpec"},{"name":"particleFunction","desc":"Optional specs that identify a particle updating function to use and properties to set for it.","type":"hemi.effect.ParticleFunction"}],"parent":"hemi.world.Citizen","desc":"An Effect is a 3D particle effect.","name":"hemi.effect.Effect"},{"funcs":[{"params":[],"desc":"Set the Emitter to not be visible.","name":"hide"},{"params":[],"desc":"Set the particle emitter up for the Emitter.","name":"setup"},{"params":[],"desc":"Set the Emitter to be visible.","name":"show"}],"props":[{"type":"string","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.effect.Effect","desc":"An Emitter constantly generates particles.","name":"hemi.effect.Emitter"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the Burst.","name":"cleanup"},{"params":[],"desc":"Set the particle emitter up for the Burst.","name":"setup"},{"params":[],"desc":"Generate the particles for the Burst.","name":"trigger"}],"props":[{"type":"string","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.effect.Emitter","desc":"A Burst generates one set of particles at a time. It can be used for a smoke puff, explosion, firework, water drip, etc.","name":"hemi.effect.Burst"},{"funcs":[{"params":[{"type":"o3d.Event","name":"renderEvent","desc":"the render event"}],"desc":"Render event handling function that allows the Trail to animate.","name":"onRender"},{"params":[],"desc":"Set the particle emitter up for the Trail.","name":"setup"},{"params":[],"desc":"Start animating the Trail. It will generate particles based upon its fireInterval property.","name":"start"},{"params":[],"desc":"Stop animating the Trail.","name":"stop"},{"ret":{"type":"Object","desc":"the Octane structure representing the Trail"},"params":[],"desc":"Get the Octane structure for the Trail.","name":"toOctane"}],"props":[{"type":"string","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.effect.Effect","desc":"A Trail is a particle effect that can be started and stopped like an animation. It can be used for effects like exhaust.","name":"hemi.effect.Trail"},{"funcs":[{"params":[],"desc":"Set the Theme as the current Theme for HUD displays.","name":"load"},{"ret":{"type":"Object","desc":"the Octane structure representing the Theme"},"params":[],"desc":"Get the Octane structure for the Theme.","name":"toOctane"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"},{"name":"image","desc":"Configuration options for an image foreground overlay.","type":"Object"},{"name":"","desc":"Options for a blur shadow effect on the image. Set radius to 0 to cancel.","type":"Object"},{"name":"page","desc":"Configuration options for a rectangular background overlay.","type":"Object"},{"name":"","desc":"The color and opacity of the rectangular overlay in RGBA format.","type":"number[4]"},{"name":"","desc":"","type":"amount of curving to apply to the corners of the page. Range is from 0.0 to 1.0 where 0 is a plain rectangle and 1 is an oval."},{"name":"","desc":"Options for a blur shadow effect on the page. This is mutually exclusive to outline. Set radius to 0 to cancel.","type":"Object"},{"name":"","desc":"Optional outline for the page in RGBA format. This is mutually exclusive to shadow. Set to null to cancel.","type":"number[4]"},{"name":"text","desc":"Configuration options for a textual foreground overlay.","type":"Object"},{"name":"","desc":"The font size of the text.","type":"number"},{"name":"","desc":"The name of the font to use to paint the text.","type":"string"},{"name":"","desc":"The horizontal alignment of the text.","type":"string"},{"name":"","desc":"Additional styling for the text (normal, bold, italics)","type":"string"},{"name":"","desc":"Flag to indicate if the HudManager should perform strict text wrapping.","type":"boolean"},{"name":"","desc":"Number of pixels to place between lines of text.","type":"number"},{"name":"","desc":"The color and opacity of the text in RGBA format.","type":"number[4]"},{"name":"","desc":"Options for a blur shadow effect on the text. This is mutually exclusive to outline. Set radius to 0 to cancel.","type":"Object"},{"name":"","desc":"Optional outline for the text in RGBA format. This is mutually exclusive to shadow. Set to null to cancel.","type":"number[4]"},{"name":"video","desc":"Configuration options for a video foreground overlay.","type":"Object"},{"name":"","desc":"Options for a blur shadow effect on the video. Set radius to 0 to cancel.","type":"Object"}],"parent":"hemi.world.Citizen","desc":"A Theme contains configuration options for displaying HUD elements like pages and text.","name":"hemi.hud.Theme"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the HudElement.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the HudElement"},"params":[],"desc":"Get the Octane structure for the HudElement.","name":"toOctane"},{"params":[],"desc":"Calculate the top, bottom, left, and right values for the HudElement. This should be implemented by subclasses.","name":"calculateBounds"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of the HudElement, otherwise false"},"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"Check if the given Event occurred within the bounds of the HudElement.","name":"checkEvent"},{"params":[],"desc":"Use the HudManager to draw the HudElement on screen. This should be implemented by subclasses.","name":"draw"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of this HudElement, otherwise false"},"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"If the given Event occurred within the bounds of this HudElement, call the HudElement's mouse down handler function (if one was set).","name":"onMouseDown"},{"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"If the HudElement's mouse move handler function is set, pass it the given Event and if it occurred within the bounds of this HudElement.","name":"onMouseMove"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of this HudElement, otherwise false"},"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"If the given Event occurred within the bounds of this HudElement, call the HudElement's mouse up handler function (if one was set).","name":"onMouseUp"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Set unique display options for this HudElement. All other display options will be derived from the current Theme.","name":"setConfig"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"},{"name":"mouseDown","desc":"The handler function for mouse down events that occur within the bounds of the HudElement.","type":"function(o3d.Event): void"},{"name":"mouseUp","desc":"The handler function for mouse up events that occur within the bounds of the HudElement.","type":"function(o3d.Event): void"},{"name":"mouseMove","desc":"The handler function for mouse move events. It takes the Event and a boolean indicating if the Event occurred within the bounds of the HudElement.","type":"function(o3d.Event, boolean): void"},{"name":"top","desc":"The y-value of the upper boundary of the HudElement. This value should be calculated at draw time rather than set directly.","type":"number"},{"name":"bottom","desc":"The y-value of the lower boundary of the HudElement. This value should be calculated at draw time rather than set directly.","type":"number"},{"name":"left","desc":"The x-value of the left boundary of the HudElement. This value should be calculated at draw time rather than set directly.","type":"number"},{"name":"right","desc":"The x-value of the right boundary of the HudElement. This value should be calculated at draw time rather than set directly.","type":"number"}],"parent":"hemi.world.Citizen","desc":"A HudElement contains the basics of any element to be drawn on the canvas.","name":"hemi.hud.HudElement"},{"funcs":[{"ret":{"type":"Object","desc":"the Octane structure representing the HudText"},"params":[],"desc":"Get the Octane structure for the HudText.","name":"toOctane"},{"params":[],"desc":"Calculate the bounds of the formatted text.","name":"calculateBounds"},{"params":[],"desc":"Draw the formatted text.","name":"draw"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Set unique display options for this HudText and perform text wrapping for the new options.","name":"setConfig"},{"params":[{"type":"string","name":"text","desc":"a string or array of strings to display"}],"desc":"Set the text to display for this HudText. Perform text wrapping for the new text.","name":"setText"},{"params":[{"type":"number","name":"width","desc":"desired width for this HudText"}],"desc":"Set the desired width for this HudText. Perform text wrapping for the new width.","name":"setWidth"},{"params":[],"desc":"Perform text wrapping on the HudText's text. This sets the wrappedText, wrappedWidth, and wrappedHeight properties.","name":"wrapText"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"},{"name":"x","desc":"The x-coordinate of the HudText. The actual on screen location will depend on the horizontal alignment of the text.","type":"number"},{"name":"y","desc":"The y-coordinate of the top of the HudText.","type":"number"},{"name":"wrappedText","desc":"The formatted text that is actually drawn on screen. This property is created whenever the text, config, or width are set. It should typically not be set directly.","type":"string[]"},{"name":"wrappedHeight","desc":"The height of the formatted text. This property is calculated whenever the text, config, or width are set. It should typically not be set directly.","type":"number"},{"name":"wrappedWidth","desc":"The width of the formatted text. This property is calculated whenever the text, config, or width are set. It should typically not be set directly.","type":"number"}],"parent":"hemi.hud.HudElement","desc":"A HudText contains formated text and display options for a single area of text on the HUD.","name":"hemi.hud.HudText"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the HudImage.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the HudImage"},"params":[],"desc":"Get the Octane structure for the HudImage.","name":"toOctane"},{"params":[],"desc":"Calculate the bounds of the image.","name":"calculateBounds"},{"params":[],"desc":"Draw the image texture.","name":"draw"},{"ret":{"type":"string","desc":"the URL of the image file"},"params":[],"desc":"Get the URL of the image file to load.","name":"getImageUrl"},{"params":[{"type":"string","name":"url","desc":"the URL of the image file"}],"desc":"Set the URL of the image file to load and begin loading it.","name":"setImageUrl"},{"params":[],"desc":"Load the image from the image url into a texture for the HudManager to paint. This sets the texture, height, and width properties.","name":"loadImage"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"},{"name":"x","desc":"The x-coordinate of the left side of the HudImage.","type":"number"},{"name":"y","desc":"The y-coordinate of the top of the HudImage.","type":"number"},{"name":"srcX","desc":"The x-coordinate of the source image to pull image data from.","type":"number"},{"name":"srcY","desc":"The y-coordinate of the source image to pull image data from.","type":"number"},{"name":"height","desc":"The height of the image. This property is calculated when the image URL is loaded. It should typically not be set directly.","type":"number"},{"name":"width","desc":"The width of the image. This property is calculated when the image URL is loaded. It should typically not be set directly.","type":"number"}],"parent":"hemi.hud.HudElement","desc":"A HudImage contains a texture and display options for a single image on the HUD.","name":"hemi.hud.HudImage"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the HudButton.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the HudButton"},"params":[],"desc":"Get the Octane structure for the HudButton.","name":"toOctane"},{"params":[],"desc":"Calculate the bounds of the button.","name":"calculateBounds"},{"params":[],"desc":"Set the HudButton's image based on the enabled and hovering flags and then draw it.","name":"draw"},{"ret":{"type":"hemi.hud.HudImage","desc":"the image to draw for the HudButton"},"params":[],"desc":"Get the image that represents the HudButton in its current state.","name":"getImage"},{"params":[{"type":"Object","name":"coords","desc":"structure with optional coordinates for different images"}],"desc":"Set the source x and y coordinates for the HudButtons images.","name":"setCoords"},{"params":[{"type":"Object","name":"urls","desc":"structure with optional urls for different images"}],"desc":"Set the image urls for the HudButtons images.","name":"setUrls"}],"props":[{"name":"x","desc":"The x-coordinate of the left side of the HudButton.","type":"number"},{"name":"y","desc":"The y-coordinate of the top of the HudButton.","type":"number"},{"name":"enabled","desc":"Flag indicating if the HudButton is enabled.","type":"boolean"},{"name":"hovering","desc":"Flag indicating if the mouse cursor is hovering over the HudButton.","type":"boolean"},{"name":"enabledImg","desc":"The HudImage to use for the HudButton when it is enabled.","type":"hemi.hud.HudImage"},{"name":"disabledImg","desc":"The HudImage to use for the HudButton when it is disabled.","type":"hemi.hud.HudImage"},{"name":"hoverImg","desc":"The HudImage to use for the HudButton when it is enabled and the mouse cursor is hovering.","type":"hemi.hud.HudImage"},{"name":"mouseMove","desc":"The built-in mouse move handler for a HudButton. If the mouse move occurred within the button's bounds, set it's hovering flag and redraw the button.","type":"built-in mouse move handler for a HudButton. If the mouse move occurred within the button's bounds, set it's hovering flag and redraw the button."}],"parent":"hemi.hud.HudImage","desc":"A HudButton uses different images based on if the button is enabled or if a mouse is hovering over it.","name":"hemi.hud.HudButton"},{"funcs":[{"params":[{"type":"string","name":"url","desc":"the URL of the video file"},{"type":"string","name":"type","desc":"the type of the video file (ogv, mp4, etc)"}],"desc":"Add the given URL as a source for the video file to load.","name":"addVideoUrl"},{"params":[],"desc":"Send a cleanup Message and remove all references in the HudVideo.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the HudVideo"},"params":[],"desc":"Get the Octane structure for the HudVideo.","name":"toOctane"},{"params":[],"desc":"Calculate the bounds of the video.","name":"calculateBounds"},{"params":[],"desc":"Draw the video.","name":"draw"},{"params":[{"type":"string","name":"url","desc":"the URL to remove"}],"desc":"Remove the given URL as a source for the video file to load.","name":"removeVideoUrl"},{"params":[{"type":"number","name":"height","desc":"the height to set for the video"}],"desc":"Set the height for the video to be displayed at.","name":"setHeight"},{"params":[{"type":"number","name":"width","desc":"the width to set for the video"}],"desc":"Set the width for the video to be displayed at.","name":"setWidth"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"},{"name":"x","desc":"The x-coordinate of the left side of the HudVideo.","type":"number"},{"name":"y","desc":"The y-coordinate of the top of the HudVideo.","type":"number"},{"name":"height","desc":"The height of the video. Call setHeight to change.","type":"number"},{"name":"width","desc":"The width of the video. Call setWidth to change.","type":"number"}],"parent":"hemi.hud.HudElement","desc":"A HudVideo contains a texture and display options for a single image on the HUD.","name":"hemi.hud.HudVideo"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the HudPage.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the HudPage"},"params":[],"desc":"Get the Octane structure for the HudPage.","name":"toOctane"},{"params":[],"desc":"Automatically set the size of the HudPage to contain all of its HudElements.","name":"autosize"},{"params":[],"desc":"Calculate the bounds of the HudElements of the HudPage.","name":"calculateBounds"},{"params":[],"desc":"Draw the background (if any) and HudElements of the HudPage.","name":"draw"},{"params":[{"type":"hemi.hud.HudElement","name":"element","desc":"element to add"}],"desc":"Add the given HudElement to the HudPage for displaying.","name":"addElement"},{"params":[],"desc":"Remove all HudElements from the HudPage.","name":"clearElements"},{"ret":{"type":"hemi.hud.HudElement","desc":"the removed element or null"},"params":[{"type":"hemi.hud.HudElement","name":"element","desc":"element to remove"}],"desc":"Remove the specified HudElement from the HudPage.","name":"removeElement"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of the HudPage, otherwise false"},"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"Check if the given Event occurred within the bounds of any of the HudElements of the HudPage. If it did, pass the Event to that HudElement. If not, call the HudPage's mouse down handler function (if one was set).","name":"onMouseDown"},{"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"Pass the given Event to all of the HudPage's HudElements. If the HudPage's mouse move handler function is set, pass it the Event and if it occurred within the bounds of the HudPage.","name":"onMouseMove"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of this HudPage, otherwise false"},"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"Check if the given Event occurred within the bounds of any of the HudElements of the HudPage. If it did, pass the Event to that HudElement. If not, call the HudPage's mouse up handler function (if one was set).","name":"onMouseUp"},{"params":[{"type":"number","name":"top","desc":"the y coordinate of the top"},{"type":"number","name":"bottom","desc":"the y coordinate of the bottom"},{"type":"number","name":"left","desc":"the x coordinate of the left"},{"type":"number","name":"right","desc":"the x coordinate of the right"}],"desc":"Manually set the size of the HudPage. This will prevent it from autosizing itself to fit all of the HudElements added to it.","name":"setSize"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"},{"name":"drawBackground","desc":"Flag indicating if a background rectangle should be drawn for the HudPage.","type":"boolean"},{"name":"margin","desc":"The number of pixels to add as padding around the bounds of the HudPage's elements when drawing the background rectangle.","type":"number"}],"parent":"hemi.hud.HudElement","desc":"A HudPage contains other HudElements and display options for drawing a single page on the HUD.","name":"hemi.hud.HudPage"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the HudDisplay.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the HudDisplay"},"params":[],"desc":"Get the Octane structure for the HudDisplay.","name":"toOctane"},{"ret":{"type":"boolean","desc":"true if the HudDisplay is currently being displayed"},"params":[],"desc":"Check to see if the HudDisplay is currently visible.","name":"isVisible"},{"params":[{"type":"hemi.hud.HudPage","name":"page","desc":"page to add"}],"desc":"Add the given HudPage to the HudDisplay.","name":"addPage"},{"ret":{"type":"hemi.hud.HudPage","desc":"the removed page or null"},"params":[{"type":"hemi.hud.HudPage","name":"page","desc":"page to remove"}],"desc":"Remove the specified HudPage from the HudDisplay.","name":"removePage"},{"params":[],"desc":"Remove all HudPages from the HudDisplay.","name":"clearPages"},{"ret":{"type":"hemi.hud.HudPage","desc":"currently displayed page"},"params":[],"desc":"Get the currently displayed HudPage.","name":"getCurrentPage"},{"ret":{"type":"number","desc":"the number of HudPages"},"params":[],"desc":"Get the number of HudPages in the HudDisplay.","name":"getNumberOfPages"},{"params":[],"desc":"Display the next HudPage in the HudDisplay.","name":"nextPage"},{"params":[],"desc":"Display the previous HudPage in the HudDisplay.","name":"previousPage"},{"params":[],"desc":"Show the first HudPage of the HudDisplay and bind the mouse handlers for interaction.","name":"show"},{"params":[],"desc":"Show the current page of the HudDisplay and add paging info if specified.","name":"showPage"},{"params":[],"desc":"Hide the HudDisplay and unregister its key and mouse handlers.","name":"hide"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of a HudPage or HudPagingDisplay, otherwise false"},"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"Pass the given mouse down Event to the currently displayed HudPage (if there is one). If the Event does not intersect it, pass it to the HudPagingDisplay (if there is one).","name":"onMouseDown"},{"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"Pass the given mouse move Event to the currently displayed HudPage (if there is one) and the HudPagingDisplay (if there is one).","name":"onMouseMove"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of a HudPage or HudPagingDisplay, otherwise false"},"params":[{"type":"o3d.Event","name":"event","desc":"the event that occurred"}],"desc":"Pass the given mouse up Event to the currently displayed HudPage (if there is one). If the Event does not intersect it, pass it to the HudPagingDisplay (if there is one).","name":"onMouseUp"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"A HudDisplay contains one or more HudPages to display sequentially.","name":"hemi.hud.HudDisplay"},{"funcs":[{"params":[{"type":"Object","name":"options","desc":"the options for painting. Valid options are <ul> <li>color - the color to paint with. This is an array in RGBA format</li> <li>shader - the shader to apply.</li> <li>textAlign - the alignment of the text. Can be 'center', 'left', 'right'</li> <li>textSize - the size of the text to draw.</li> <li>textStyle - the style of the text. Can be 'normal', 'bold', 'italic', 'bold italic'</li> <li>textTypeface - the type face of the text. e.g.: 'arial'</li> </ul>"}],"desc":"Set the painting properties for the HUD canvas.","name":"setPaintProperties"},{"params":[{"type":"hemi.hud.HudElement","name":"element","desc":"element with a bounding box to display"},{"type":"Object","name":"boxConfig","desc":"unique configuration options for the rectangular overlay"}],"desc":"Create a rectangular overlay from the given HudElement.","name":"createRectangleOverlay"},{"params":[{"type":"string","name":"text","desc":"the text display"},{"type":"Object","name":"textConfig","desc":"unique configuration options for the text overlay"},{"type":"number","name":"x","desc":"x coordinate to draw the text at"},{"type":"number","name":"y","desc":"y coordinate to draw the text at"}],"desc":"Create a text overlay.","name":"createTextOverlay"},{"params":[{"type":"Image","name":"image","desc":"the image to display"},{"type":"Object","name":"imgConfig","desc":"unique configuration options for the image overlay"},{"type":"number","name":"x","desc":"x coordinate to draw the image at"},{"type":"number","name":"y","desc":"y coordinate to draw the image at"},{"type":"number","name":"srcX","desc":"optional x coordinate to pull from source image"},{"type":"number","name":"srcY","desc":"optional y coordinate to pull from source image"},{"type":"number","name":"width","desc":"optional width of destination image"},{"type":"number","name":"height","desc":"optional height of destination image"}],"desc":"Create an image overlay.","name":"createImageOverlay"},{"params":[{"type":"Video","name":"video","desc":"the video to display"},{"type":"Object","name":"vidConfig","desc":"unique configuration options for the video overlay"},{"type":"number","name":"x","desc":"x coordinate to draw the video at"},{"type":"number","name":"y","desc":"y coordinate to draw the video at"},{"type":"number","name":"width","desc":"optional width of video"},{"type":"number","name":"height","desc":"optional height of video"}],"desc":"Create a video overlay.","name":"createVideoOverlay"},{"params":[],"desc":"Clear the current overlays from the HUD.","name":"clearDisplay"},{"ret":{"type":"Object","desc":"wrapped text object"},"params":[{"type":"string","name":"text","desc":"the text to display"},{"type":"number","name":"width","desc":"the maximum line width before wrapping"},{"type":"Object","name":"textOptions","desc":"unique configuration options for the text overlay"}],"desc":"Calculate text wrapping and format the given string.","name":"doTextWrapping"},{"params":[{"type":"hemi.hud.HudElement","name":"element","desc":"element with a bounding box to create the rectangle from"},{"type":"number","name":"curveFactor","desc":"amount of curving on the corners (between 0 and 0.5)"},{"type":"boolean","name":"fill","desc":"flag indicating whether to fill or stroke"}],"desc":"Draw a rectangular overlay that has rounded corners from the given HudElement.","name":"drawRoundRect"},{"params":[{"type":"o3d.RenderEvent","name":"renderEvent","desc":"event containing render info"}],"desc":"Copy the current image from any video elements onto the canvas on each render.","name":"onRender"}],"props":[],"parent":"hemi.world.Citizen","desc":"A HudManager creates the appropriate view components for rendering a HUD.","name":"hemi.hud.HudManager"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the Draggable.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the Draggable"},"params":[],"desc":"Get the Octane structure for the Draggable.","name":"toOctane"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the transform to add"}],"desc":"Add a Transform to the list of draggable Transforms.","name":"addTransform"},{"ret":{"type":"number[2]","desc":"the actual change in uv after clamping"},"params":[{"type":"number[2]","name":"delta","desc":"the uv change to add before clamping"}],"desc":"Add the given UV delta to the current UV coordinates and clamp the results.","name":"clamp"},{"params":[],"desc":"Remove any previously set limits from the draggable.","name":"clearLimits"},{"params":[],"desc":"Clear the list of draggable Transforms.","name":"clearTransforms"},{"ret":{"type":"boolean","desc":"true if the Transform is found"},"params":[{"type":"o3d.Transform","name":"transform","desc":"transform to check against"}],"desc":"Check if a given Transform is contained within the children of the Transforms acted upon by this Draggable.","name":"containsTransform"},{"params":[],"desc":"Disable mouse interaction for the Draggable.","name":"disable"},{"params":[],"desc":"Enable mouse interaction for the Draggable.","name":"enable"},{"ret":{"type":"number[3][3]","desc":"the current drag plane defined as 3 XYZ points"},"params":[],"desc":"Get the two dimensional plane that the Draggable will translate its active Transform along.","name":"getPlane"},{"ret":{"type":"o3d.Transform[]","desc":"array of Transforms"},"params":[],"desc":"Get the Transforms that the Draggable currently contains.","name":"getTransforms"},{"ret":{"type":"number[2]","desc":"equivalent UV coordinates"},"params":[{"type":"number","name":"x","desc":"x screen coordinate"},{"type":"number","name":"y","desc":"y screen coordinate"}],"desc":"Convert the given screen coordinates into UV coordinates on the current dragging plane.","name":"getUV"},{"params":[{"type":"o3d.Event","name":"event","desc":"message describing how the mouse has moved"}],"desc":"Mouse movement event listener, calculates mouse point intersection with this Draggable's plane, and then translates the dragging object accordingly.","name":"onMouseMove"},{"params":[{"type":"o3d.Event","name":"event","desc":"message describing the mouse behavior"}],"desc":"Mouse-up event listener, stops dragging.","name":"onMouseUp"},{"params":[{"type":"o3djs.picking.PickInfo","name":"pickInfo","desc":"pick event information that contains information on the shape and transformation picked."},{"type":"o3d.Event","name":"mouseEvent","desc":"message describing mouse behavior"}],"desc":"Pick event listener; checks in-scene intersections, and allows dragging.","name":"onPick"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"}],"desc":"Receive the given Transform from the TransformRegistry.","name":"receiveTransform"},{"params":[{"type":"number[2][2]","name":"coords","desc":"min and max uv points on the current plane"}],"desc":"Set the relative uv limits in which this Draggable can move.","name":"setLimits"},{"params":[{"type":"number[3][3]","name":"plane","desc":"array of three XYZ coordinates defining a plane"}],"desc":"Set the 2d plane on which this Draggable is bound.","name":"setPlane"},{"params":[],"desc":"Set the Draggable to operate in the local space of the transform it is translating.","name":"setToLocal"},{"params":[],"desc":"Set the Draggable to operate in world space.","name":"setToWorld"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"A Draggable allows a 3d object to be dragged around the scene with the mouse, constrained to a defined 2d plane.","name":"hemi.manip.Draggable"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the Turnable.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the Turnable"},"params":[],"desc":"Get the Octane structure for the Turnable.","name":"toOctane"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the transform that will turn about its origin when clicked and dragged"}],"desc":"Add a Transform to this Turnable object.","name":"addTransform"},{"params":[],"desc":"Remove any previously set limits from the Turnable.","name":"clearLimits"},{"params":[],"desc":"Clear the list of Turnable Transforms.","name":"clearTransforms"},{"params":[{"type":"o3d.transform","name":"transform","desc":"Transform to match against"}],"desc":"Check if this turnable object contains a transform within its children, and sets the plane offset to match that transform if found.","name":"containsTransform"},{"params":[],"desc":"Disable mouse interaction for the Turnable.","name":"disable"},{"params":[],"desc":"Enable mouse interaction for the Turnable.","name":"enable"},{"ret":{"type":"number","desc":"relative angle of mouse click position on the Turnable's current active plane"},"params":[{"type":"number","name":"x","desc":"screen x-position of the mouse click event"},{"type":"number","name":"y","desc":"screen y-position of the mouse click event"}],"desc":"Get the relative angle of a mouse click's interception with the active plane to the origin of that plane.","name":"getAngle"},{"ret":{"type":"o3d.Transform[]","desc":"array of Transforms"},"params":[],"desc":"Get the Transforms that the Turnable currently contains.","name":"getTransforms"},{"params":[{"type":"o3d.Event","name":"event","desc":"message describing the mouse position, etc."}],"desc":"On mouse move, if the shape has been clicked and is being dragged, calculate intersection points with the active plane and turn the Transform to match.","name":"onMouseMove"},{"params":[{"type":"o3d.Event","name":"event","desc":"message describing mouse position, etc."}],"desc":"On mouse up, deactivate turning.","name":"onMouseUp"},{"params":[{"type":"o3d.PickInfo","name":"pickInfo","desc":"information about the pick event"},{"type":"o3d.Event","name":"event","desc":"message describing mouse position, etc."}],"desc":"On a pick message, if it applies to this Turnable, set turning to true and calculate the relative angle.","name":"onPick"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"}],"desc":"Receive the given Transform from the TransformRegistry.","name":"receiveTransform"},{"params":[{"type":"hemi.manip.Axis","name":"axis","desc":"axis to rotate about - x, y, or z"}],"desc":"Set the axis to which this Turnable is bound.","name":"setAxis"},{"params":[{"type":"number[2]","name":"limits","desc":"minimum and maximum angle limits (in radians)"}],"desc":"Set the limits to which this Turnable can rotate.","name":"setLimits"},{"params":[],"desc":"Set the Turnable to operate in the local space of the transform it is rotating.","name":"setToLocal"},{"params":[],"desc":"Set the Turnable to operate in world space.","name":"setToWorld"},{"params":[],"desc":"Clear the list of scalable transforms.","name":"clearTransforms"},{"params":[],"desc":"Set the Scalable to operate in the local space of the transform it is scaling.","name":"setToLocal"},{"params":[],"desc":"Set the Scalable to operate in world space.","name":"setToWorld"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"A Turnable allows a Transform to be turned about an axis by the user clicking and dragging with the mouse.","name":"hemi.manip.Turnable"},{"funcs":[{"ret":{"type":"Object","desc":"the Octane structure representing the TransformUpdate"},"params":[],"desc":"Get the Octane structure for the TransformUpdate.","name":"toOctane"},{"ret":{"type":"boolean","desc":"true if the Transform has been changed"},"params":[],"desc":"Check if the TransformUpdate has been modified.","name":"isModified"},{"params":[{"type":"hemi.model.Model","name":"model","desc":"the Model to get the Transform from"}],"desc":"Apply the changes in the TransformUpdate to its target Transform.","name":"apply"}],"props":[{"name":"localMatrix","desc":"The updated position, rotation, and scale of the Transform.","type":"number[4][4]"},{"name":"visible","desc":"A flag indicating if the Transform is visible.","type":"boolean"},{"name":"pickable","desc":"A flag indicating if the Transform is able to be picked.","type":"boolean"},{"name":"opacity","desc":"The opacity of the Transform.","type":"number"}],"desc":"A TransformUpdate allows changes to a Transform in a Model to be persisted through Octane.","name":"hemi.model.TransformUpdate"},{"funcs":[{"ret":{"type":"o3d.Material[]","desc":"array of materials"},"params":[],"desc":"Get all materials loaded in the pack from the model file.","name":"getMaterials"},{"ret":{"type":"o3d.Shape[]","desc":"array of shapes"},"params":[],"desc":"Get all shapes loaded in the pack from the model file.","name":"getShapes"},{"ret":{"type":"o3d.Transform[]","desc":"array of tranforms"},"params":[],"desc":"Get all transforms loaded in the pack from the model file.","name":"getTransforms"}],"props":[],"desc":"A ModelConfig contains the pack, transform, and animation time attributes for a Model. The pack is filled with shapes, transforms, and materials loaded from a model file.","name":"hemi.model.ModelConfig"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the Model.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the Model"},"params":[],"desc":"Get the Octane structure for the Model.","name":"toOctane"},{"params":[{"type":"string","name":"fileName","desc":"name of the file"}],"desc":"Set the file name and model name for the Model and then begin loading the file.","name":"setFileName"},{"params":[],"desc":"Load the Model (or reload) from its file url.","name":"load"},{"params":[{"type":"hemi.model.ModelConfig","name":"config","desc":"configuration for the Model"}],"desc":"Load the given configuration into the Model, populating it with transforms, shapes, and materials.","name":"loadConfig"},{"ret":{"type":"o3d.ParamObject","desc":"the Model's animation parameter"},"params":[],"desc":"Get the Model's animation parameter. It's value property can be set to update the Model to a specific keyframe.","name":"getAnimationParameter"},{"ret":{"type":"number","desc":"the Model's current animation time"},"params":[],"desc":"Get the Model's current animation time.","name":"getAnimationTime"},{"ret":{"type":"number","desc":"the Model's max animation time"},"params":[],"desc":"Get the Model's max animation time value (in seconds).","name":"getMaxAnimationTime"},{"params":[{"type":"number","name":"animateInc","desc":"amount to increment animation time by"}],"desc":"Increment the Model's animation time by the given amount.","name":"incrementAnimationTime"},{"params":[{"type":"number","name":"animateTime","desc":"amount to set the animation time to"}],"desc":"Set the Model's animation time to the given amount.","name":"setAnimationTime"},{"ret":{"type":"o3d.Material[]","desc":"array of Materials with the given name"},"params":[{"type":"string","name":"materialName","desc":"the name of the desired Material"}],"desc":"Get any Materials in the Model with the given name.","name":"getMaterials"},{"ret":{"type":"o3d.Shape[]","desc":"array of Shapes with the given name"},"params":[{"type":"string","name":"shapeName","desc":"the name of the desired Shape"}],"desc":"Get any Shapes in the Model with the given name.","name":"getShapes"},{"ret":{"type":"o3d.Transform[]","desc":"array of Transforms with the given name"},"params":[{"type":"string","name":"transformName","desc":"the name of the desired Transform"}],"desc":"Get any Transforms in the Model with the given name.","name":"getTransforms"},{"ret":{"type":"hemi.model.TransformUpdate","desc":"the TransformUpdate for the Transform"},"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"}],"desc":"Get the TransformUpdate for the given Transform, or create a new one if it does not already exist.","name":"getTransformUpdate"},{"ret":{"type":"number[3]","desc":"XYZ point in 3D space"},"params":[],"desc":"Calculate the center point of the Model's bounding box.","name":"getCenterPoint"},{"ret":{"type":"o3d.BoundingBox","desc":"bounding box for the entire Model"},"params":[],"desc":"Get the bounding box of the Model's root Transform.","name":"getBoundingBox"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Set the pickable flag for the Transforms in the Model.","name":"setPickable"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform to update"},{"type":"number","name":"opacity","desc":"the new opacity value"},{"type":"boolean","name":"opt_trickle","desc":"optional flag indicating if opacity should also be set for the Transform's children (default is true)"}],"desc":"Sets the opacity of the Transform to the given value.","name":"setTransformOpacity"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"},{"type":"boolean","name":"pickable","desc":"value to set for pickable"}],"desc":"Set the pickable flag for the given Transform.","name":"setTransformPickable"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"},{"type":"boolean","name":"visible","desc":"value to set for visible"}],"desc":"Set the visible flag for the given Transform.","name":"setTransformVisible"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Set the visible flag for the Transforms in the Model.","name":"setVisible"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Rotate the Transforms in the Model.","name":"rotate"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"},{"type":"number","name":"amount","desc":"the amount to rotate (in radians)"}],"desc":"Rotate the given Transform along the x-axis by the amount provided.","name":"rotateTransformX"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"},{"type":"number","name":"amount","desc":"the amount to rotate (in radians)"}],"desc":"Rotate the given Transform along the y-axis by the amount provided.","name":"rotateTransformY"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"},{"type":"number","name":"amount","desc":"the amount to rotate (in radians)"}],"desc":"Rotate the given Transform along the z-axis by the amount provided.","name":"rotateTransformZ"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Scale the Transforms in the Model.","name":"scale"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"},{"type":"number","name":"xFactor","desc":"the amount to scale along x"},{"type":"number","name":"yFactor","desc":"the amount to scale along y"},{"type":"number","name":"zFactor","desc":"the amount to scale along z"}],"desc":"Scale the given Transform by the factors provided.","name":"scaleTransform"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"},{"type":"number[4][4]","name":"matrix","desc":"the new local matrix"}],"desc":"Set the given Transform's matrix to the new matrix.","name":"setTransformMatrix"},{"params":[],"desc":"Clean up any materials, shapes, and transforms contained in the Model.","name":"unload"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"},{"name":"isAnimating","desc":"A flag that indicates if the Model is currently animating.","type":"boolean"}],"parent":"hemi.world.Citizen","desc":"A Model contains geometric shapes, hierarchical transforms that manipulate those shapes, and materials that affect how the shapes are displayed.","name":"hemi.model.Model"},{"funcs":[{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform to add"}],"desc":"Add a Transform to the list of Transforms that will be spinning. A child Transform is created to allow the Rotator to spin about an arbitray axis.","name":"addTransform"},{"params":[],"desc":"Send a cleanup Message and remove all references in the Rotator.","name":"cleanup"},{"params":[],"desc":"Clear properties like acceleration, velocity, etc.","name":"clear"},{"params":[],"desc":"Clear the list of spinning Transforms.","name":"clearTransforms"},{"params":[],"desc":"Disable mouse interaction for the Rotator.","name":"disable"},{"params":[],"desc":"Enable mouse interaction for the Rotator.","name":"enable"},{"ret":{"type":"o3d.Transform[]","desc":"array of Transforms"},"params":[],"desc":"Get the Transforms that the Rotator currently contains.","name":"getTransforms"},{"params":[{"type":"number[3]","name":"theta","desc":"XYZ amounts to rotate (in radians)"},{"type":"number","name":"time","desc":"number of seconds for the rotation to take"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating that no other rotations can be started until this one finishes"}],"desc":"Make the Rotator rotate the specified amount in the specified amount of time.","name":"rotate"},{"params":[{"type":"o3d.Event","name":"event","desc":"message describing the render event"}],"desc":"Render event listener - Perform Newtonian calculations on the rotating object, starting with the angular velocity.","name":"onRender"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"}],"desc":"Receive the given Transform from the TransformRegistry.","name":"receiveTransform"},{"params":[{"type":"number[3]","name":"accel","desc":"XYZ angular acceleration (in radians)"}],"desc":"Set the angular acceleration.","name":"setAccel"},{"params":[{"type":"number[3]","name":"theta","desc":"XYZ rotation angle (in radians)"}],"desc":"Set the current rotation angle.","name":"setAngle"},{"params":[{"type":"number[3]","name":"origin","desc":"XYZ origin"}],"desc":"Set the origin of the Rotator Transform.","name":"setOrigin"},{"params":[{"type":"number[3]","name":"vel","desc":"XYZ angular velocity (in radians)"}],"desc":"Set the angular velocity.","name":"setVel"},{"ret":{"type":"Object","desc":"the Octane structure representing the Rotator"},"params":[],"desc":"Get the Octane structure for the Rotator.","name":"toOctane"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"A Rotator makes automated rotation easier by allowing simple calls such as setVel to begin the automated spinning of a Transform.","name":"hemi.motion.Rotator"},{"funcs":[{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform to add"}],"desc":"Add the Transform to the list of Transforms that will be moving.","name":"addTransform"},{"params":[],"desc":"Send a cleanup Message and remove all references in the Translator.","name":"cleanup"},{"params":[],"desc":"Clear properties like acceleration, velocity, etc.","name":"clear"},{"params":[],"desc":"Clear the list of translating Transforms.","name":"clearTransforms"},{"params":[],"desc":"Disable mouse interaction for the Translator.","name":"disable"},{"params":[],"desc":"Enable mouse interaction for the Translator.","name":"enable"},{"ret":{"type":"o3d.Transform[]","desc":"array of Transforms"},"params":[],"desc":"Get the Transforms that the Translator currently contains.","name":"getTransforms"},{"params":[{"type":"number[3]","name":"delta","desc":"XYZ amount to translate"},{"type":"number","name":"time","desc":"number of seconds for the translation to take"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating that no other translations can be started until this one finishes"}],"desc":"Make the Translator translate the specified amount in the specified amount of time.","name":"move"},{"params":[{"type":"o3d.Event","name":"event","desc":"message describing render event"}],"desc":"Render event listener - calculate the position of the Translator, based on the acceleration and velocity.","name":"onRender"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"}],"desc":"Receive the given Transform from the TransformRegistry.","name":"receiveTransform"},{"params":[{"type":"number[3]","name":"a","desc":"XYZ acceleration vector"}],"desc":"Set the acceleration.","name":"setAccel"},{"params":[{"type":"number[3]","name":"x","desc":"XYZ position"}],"desc":"Set the position.","name":"setPos"},{"params":[{"type":"number[3]","name":"v","desc":"XYZ velocity vector"}],"desc":"Set the velocity.","name":"setVel"},{"ret":{"type":"Object","desc":"the Octane structure representing the Translator"},"params":[],"desc":"Get the Octane structure for the Translator.","name":"toOctane"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"A Translator provides easy setting of linear velocity and acceleration of shapes and transforms in the 3d scene.","name":"hemi.motion.Translator"},{"funcs":[{"params":[{"type":"boolean","name":"pickable","desc":"true to allow picks"},{"type":"boolean","name":"recurse","desc":"true to apply the change to any child Transforms as well"}],"desc":"Set the pickable property for the HemiTransformInfo.","name":"setPickable"},{"ret":{"type":"o3djs.picking.PickInfo","desc":"Information about the picking. null if the ray did not intersect any triangles."},"params":[{"type":"o3djs.picking.Ray","name":"worldRay","desc":"A ray in world space to pick against"}],"desc":"Override TransformInfo's pick function so that we can temporarily hide the TransformInfo's shapes if it is not pickable.","name":"pick"}],"props":[],"parent":"o3djs.picking.TransformInfo","desc":"A HemiTransformInfo extends O3D's TransformInfo to allow the user to specify if the referenced Transform should be pickable or not.","name":"hemi.picking.HemiTransformInfo"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the Scene.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the Scene"},"params":[],"desc":"Get the Octane structure for the Scene.","name":"toOctane"},{"params":[],"desc":"Load the Scene.","name":"load"},{"params":[],"desc":"Unload the Scene.","name":"unload"},{"params":[],"desc":"Unload the Scene and move to the next Scene (if it has been set).","name":"nextScene"},{"params":[],"desc":"Unload the Scene and move to the previous Scene (if it has been set).","name":"previousScene"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType.","name":"citizenType"},{"name":"isLoaded","desc":"Flag indicating if the Scene is currently loaded.","type":"boolean"},{"name":"next","desc":"The next Scene to move to after this one.","type":"hemi.scene.Scene"},{"name":"prev","desc":"The previous Scene that occurred before this one.","type":"hemi.scene.Scene"}],"parent":"hemi.world.Citizen","desc":"A Scene represents a logical grouping of behavior, events, and interactions. It can be used to determine when various interactions are valid or if various events should be enabled.","name":"hemi.scene.Scene"},{"funcs":[{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform to update"}],"desc":"Apply the changes in the TransformUpdate to the given Transform.","name":"apply"},{"ret":{"type":"boolean","desc":"true if the Transform has been changed"},"params":[],"desc":"Check if the TransformUpdate has been modified.","name":"isModified"},{"params":[],"desc":"Reset the TransformUpdate to its unmodified state.","name":"reset"},{"ret":{"type":"Object","desc":"the Octane structure representing the TransformUpdate"},"params":[],"desc":"Get the Octane structure for the TransformUpdate.","name":"toOctane"}],"props":[{"name":"localMatrix","desc":"The updated position, rotation, and scale of the Transform.","type":"number[4][4]"},{"name":"visible","desc":"A flag indicating if the Transform is visible.","type":"boolean"},{"name":"pickable","desc":"A flag indicating if the Transform is able to be picked.","type":"boolean"}],"desc":"A TransformUpdate allows changes to the Transform in a Shape to be persisted through Octane.","name":"hemi.shape.TransformUpdate"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the Shape.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing the Shape"},"params":[],"desc":"Get the Octane structure for the Shape.","name":"toOctane"},{"params":[{"type":"Object","name":"cfg","desc":"configuration options for the Shape"}],"desc":"Change the existing Shape to a new type of Shape using the given configuration.","name":"change"},{"params":[],"desc":"Create the actual shape and transform for the Shape.","name":"create"},{"params":[{"type":"Object","name":"config","desc":"configuration options for the Shape"}],"desc":"Load the given configuration object.","name":"loadConfig"},{"params":[{"type":"number","name":"id","desc":"the new id"}],"desc":"Overwrites Citizen.setId() so that the internal transform gets the new id as well.","name":"setId"},{"params":[{"type":"string","name":"name","desc":"the new name"}],"desc":"Sets the transform and shape names as well as the overall name for this shape.","name":"setName"},{"ret":{"type":"o3d.Transform","desc":"the transform for the Shape"},"params":[],"desc":"Get the transform for the Shape.","name":"getTransform"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Rotate the Transforms in the Shape.","name":"rotate"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Scale the Transforms in the Shape.","name":"scale"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Set the pickable flag for the Transforms in the Shape.","name":"setPickable"},{"params":[{"type":"number[4][4]","name":"matrix","desc":"the new local matrix"}],"desc":"Set the Shape Transform's matrix to the new matrix.","name":"setMatrix"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Set the visible flag for the Transforms in the Shape.","name":"setVisible"},{"params":[{"type":"number","name":"x","desc":"amount to translate on the x axis"},{"type":"number","name":"y","desc":"amount to translate on the y axis"},{"type":"number","name":"z","desc":"amount to translate on the z axis"}],"desc":"Translate the Shape by the given amounts.","name":"translate"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType.","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"A Shape is a wrapper class around basic geometric shapes such as cubes and spheres that allows them to interact with the World in complex ways.","name":"hemi.shape.Shape"},{"funcs":[{"params":[{"type":"string","name":"path","desc":"the path to the image source"},{"type":"function(number,hemi.sprite.Sprite):void","name":"opt_callback","desc":"a function to call and pass the index and sprite"}],"desc":"Add an image to be used as a frame in the animation, or as a standalone image.","name":"addFrame"},{"params":[{"type":"boolean","name":"enable","desc":"If true, keep sprite size constant"}],"desc":"Set the Sprite to be a constant size in the viewer.","name":"constantSize"},{"params":[{"type":"boolean","name":"enable","desc":"If true, always look at camera"}],"desc":"Set the Sprite to always look at the camera.","name":"lookAtCamera"},{"params":[{"type":"o3d.RenderEvent","name":"e","desc":"Message describing this render loop"}],"desc":"Function to call on every render cycle. Scale or rotate the Sprite if needed, and update the frame if needed.","name":"onRender"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"Transform to be the new parent"}],"desc":"Set the parent of the Sprite to a Transform.","name":"parent"},{"params":[{"type":"number","name":"opt_cycles","desc":"Number of cycles, defaults to one loop through the frames"}],"desc":"Start the Sprite animating, for a set number of cycles, or pass in -1 for infinite looping.","name":"run"},{"params":[{"type":"number","name":"index","desc":"Index of desired frame"}],"desc":"Set the Sprite to display one of it's frames.","name":"setFrame"},{"params":[{"type":"number","name":"period","desc":"Period, in seconds"}],"desc":"Set the period of time, in seconds, that each frame of the Sprite's animation will display.","name":"setPeriod"},{"params":[],"desc":"Stop the animating frames.","name":"stop"}],"props":[],"desc":"A Sprite can display a 2d image on a plane with several options. The image can be made to always face the camera, and it can scale to stay the same size in the viewer. It can also cycle through a series of frames to create an animation effect, for a number of cycles or indefinitely.","name":"hemi.sprite.Sprite"},{"funcs":[],"props":[{"name":"textureURL","desc":"The url of the texture image file","type":"string"}],"desc":"A TestureSampler contains a texture URL and a value.  The value is the o3d.Sampler which can be assigned to a shader's sampler parameter.","name":"hemi.texture.TextureSampler"},{"funcs":[{"params":[{"type":"string","name":"name","desc":"the name for the texture"},{"type":"string","name":"url","desc":"the url of the image"}],"desc":"Add a named texture file at the given url to this set.","name":"addTexture"},{"params":[{"type":"string","name":"name","desc":"the name of the TextureSampler"},{"type":"hemi.texture.TextureSampler","name":"texSampler","desc":"the TextureSampler"}],"desc":"Add the given TextureSampler to this set.","name":"addTextureSampler"},{"ret":{"type":"hemi.texture.TextureSampler","desc":"the TextureSampler"},"params":[{"type":"string","name":"name","desc":"the name it was given when added."}],"desc":"Get the TextureSampler with the name in this set.","name":"getTextureSampler"},{"ret":{"type":"o3d.Sampler","desc":"the O3D sampler"},"params":[{"type":"string","name":"name","desc":"the name of the TextureSampler"}],"desc":"Get the O3D Sampler from the named TextureSampler","name":"getSamplerValue"},{"params":[{"type":"string","name":"name","desc":"the name of the texture"},{"type":"string","name":"url","desc":"the url to load the image from"}],"desc":"Load a texture from the given url and associate it in this set with the given name.","name":"loadTexture"},{"params":[{"type":"hemi.texture.TextureSampler","name":"texSampler","desc":"the TextureSampler to load and set the texture on"}],"desc":"Load a TextureSampler's texture image file and set the texture on the value, which is an O3D Sampler, once loaded.","name":"loadTextureSampler"}],"props":[{"name":"samplers","desc":"An object literal that maps a given name for the TextureSampler to its instance for easy access.","type":"Object"},{"name":"count","desc":"The total number of TextureSamplers in this set.","type":"number"}],"desc":"A TextureSet can manage TextureSamplers that are part of a set as defined by the author.  It will handle loading them and notify the author upon completion.","name":"hemi.texture.TextureSet"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the Timer.","name":"cleanup"},{"params":[],"desc":"Pause the Timer if it is currently running.","name":"pause"},{"params":[],"desc":"Reset the Timer so it is ready to count down again.","name":"reset"},{"params":[],"desc":"Resume the Timer's count down if it is currently paused.","name":"resume"},{"params":[],"desc":"Start the Timer's count down. If it is currently running, restart the Timer from its initial count down value.","name":"start"},{"params":[],"desc":"Stop the Timer if it is currently running or paused. This resets any currently elapsed time on the Timer.","name":"stop"},{"ret":{"type":"Object","desc":"the Octane structure representing the Timer"},"params":[],"desc":"Get the Octane structure for the Timer.","name":"toOctane"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType.","name":"citizenType"},{"name":"startTime","desc":"The time the timer will start counting down from (milliseconds).","type":"number"}],"parent":"hemi.world.Citizen","desc":"A Timer is a simple countdown timer that can be used to script behavior and sequence events.","name":"hemi.time.Timer"},{"funcs":[{"params":[],"desc":"Clamp the pan and tilt angles to the Camera's limits.","name":"clampPanTilt"},{"params":[],"desc":"Send a cleanup Message and remove all references in the Camera.","name":"cleanup"},{"params":[],"desc":"Disable control of the Camera through the mouse and keyboard.","name":"disableControl"},{"params":[],"desc":"Disable the shiftkey scanning functionality.","name":"disableScan"},{"params":[],"desc":"Disable the scroll wheel zooming functionality.","name":"disableZoom"},{"params":[],"desc":"Enable control of the Camera through the mouse and keyboard.","name":"enableControl"},{"params":[],"desc":"Enable the shiftkey dragging functionality.","name":"enableScan"},{"params":[],"desc":"Enable the camera to zoom with the mouse scroll.","name":"enableZoom"},{"params":[],"desc":"Fix the eye to current spot, and use mouse movements to look around.","name":"fixEye"},{"params":[],"desc":"Attach the light source to the Camera.","name":"lightOnCam"},{"params":[],"desc":"Allow the eye to rotate about a fixed target. This is the default mode.","name":"freeEye"},{"params":[{"type":"number[3]","name":"position","desc":"XYZ position of the light source"}],"desc":"Set the light source to be at the given position.","name":"lightAtPosition"},{"ret":{"type":"number[3]","desc":"XYZ coordinates of the eye"},"params":[],"desc":"Get the current position of the Camera eye.","name":"getEye"},{"ret":{"type":"number[3]","desc":"XYZ coordinates of the target"},"params":[],"desc":"Get the current position of the Camera target.","name":"getTarget"},{"params":[],"desc":"Set the Camera's movement to be measured in frames.","name":"moveInFrames"},{"params":[],"desc":"Set the Camera's movement to be measured in seconds.","name":"moveInSeconds"},{"params":[{"type":"hemi.view.CameraCurve","name":"curve","desc":"curve for the Camera eye and target to follow"},{"type":"number","name":"opt_time","desc":"the number of seconds for the Camera to take to move along the curve (0 is instant)"}],"desc":"Move the Camera along the specified curve.","name":"moveOnCurve"},{"params":[{"type":"number","name":"xMovement","desc":"The mouse movement, in pixels, along the x-axis"},{"type":"number","name":"yMovement","desc":"The mouse movement, in pixels, along the y-axis"}],"desc":"Move the Camera when the Camera is in orthographic viewing mode.","name":"moveOrthographic"},{"params":[{"type":"number","name":"xMovement","desc":"The mouse movement, in pixels, along the x-axis"},{"type":"number","name":"yMovement","desc":"The mouse movement, in pixels, along the y-axis"}],"desc":"Move the Camera when the Camera is in perspective viewing mode.","name":"movePerspective"},{"params":[{"type":"hemi.view.Viewpoint","name":"view","desc":"Viewpoint to move to"},{"type":"number","name":"opt_time","desc":"the number of seconds for the Camera to take to move to the Viewpoint (0 is instant)"}],"desc":"Move the Camera to the given Viewpoint.","name":"moveToView"},{"params":[{"type":"o3d.Event","name":"keyEvent","desc":"Message describing key down"}],"desc":"Keyboard key-down listener.","name":"onKeyDown"},{"params":[{"type":"o3d.Event","name":"keyEvent","desc":"Message describing key up"}],"desc":"Keyboard key-up listener.","name":"onKeyUp"},{"params":[{"type":"o3d.Event","name":"mouseEvent","desc":"Message describing mouse down"}],"desc":"Mouse-down listener - set parameters to reflect that fact.","name":"onMouseDown"},{"params":[{"type":"o3d.Event","name":"mouseEvent","desc":"Message describing mouse move"}],"desc":"Mouse-move listener - move the camera if the mouse is down.","name":"onMouseMove"},{"params":[{"type":"o3d.Event","name":"mouseEvent","desc":"Message describing mouse up"}],"desc":"Mouse-up listener","name":"onMouseUp"},{"params":[{"type":"o3d.Event","name":"renderEvent","desc":"Message desribing render loop"}],"desc":"Render listener - check mouse and camera parameters and decide if the Camera needs to be updated.","name":"onRender"},{"params":[{"type":"o3d.Event","name":"mouseEvent","desc":"Message describing mouse behavior"}],"desc":"Mouse-scroll listener - zoom the camera in or out.","name":"onScroll"},{"params":[{"type":"number","name":"pan","desc":"amount to pan around by (in radians)"},{"type":"number","name":"tilt","desc":"amount to tilt up and down by (in radians)"}],"desc":"Orbit the Camera about the target point it is currently looking at.","name":"orbit"},{"params":[{"type":"number","name":"pan","desc":"amount to pan (in radians)"},{"type":"number","name":"tilt","desc":"amount to tilt (in radians)"}],"desc":"Rotate the Camera in place so that it looks in a new direction. Note that this has no effect if the Camera is not in fixed-eye mode.","name":"rotate"},{"params":[{"type":"number","name":"panMin","desc":"minimum pan angle (in radians)"},{"type":"number","name":"panMax","desc":"maximum pan angle (in radians)"},{"type":"number","name":"tiltMin","desc":"minimum tilt angle (in radians)"},{"type":"number","name":"tiltMax","desc":"maximum tilt angle (in radians)"}],"desc":"Set the limits on the Camera pan and tilt in fixed eye mode.","name":"setLookAroundLimits"},{"ret":{"type":"hemi.view.Camera","desc":"This Camera, for chaining"},"params":[{"type":"function|Object","name":"easeFunc","desc":"Either the function which will be used for easing on all 3 axes, or a simple object containing x, y, or z fields specifying a different function for each axis."}],"desc":"Set the function used to ease the Camera in and out of moves.","name":"setEasing"},{"params":[{"type":"number[3]","name":"eye","desc":"XYZ position of camera eye"},{"type":"number[3]","name":"target","desc":"XYZ position of camera target"}],"desc":"Set the eye and target of the Camera.","name":"setEyeTarget"},{"params":[{"type":"number[3]","name":"rgb","desc":"rgb value of the color"}],"desc":"Set the color of the Camera's light source.","name":"setLight"},{"params":[{"type":"number","name":"axis","desc":"Enum for xy, xz, or yz plane to look at"}],"desc":"Set the Camera view to render with an orthographic projection.","name":"setOrthographic"},{"params":[],"desc":"Set the Camera view to render with a perspective projection.","name":"setPerspective"},{"params":[{"type":"number","name":"min","desc":"zoom-in limit (in radians)"},{"type":"number","name":"max","desc":"zoom-out limit (in radians)"}],"desc":"Set the zooming limits in fixed-eye mode.","name":"setZoomLimits"},{"ret":{"type":"Object","desc":"the Octane structure representing this Camera"},"params":[],"desc":"Get the Octane structure for this Camera.","name":"toOctane"},{"params":[{"type":"number","name":"distance","desc":"the distance to move the Camera"}],"desc":"Move the Camera towards or away from its current target point by the given distance.","name":"truck"},{"params":[{"type":"number","name":"current","desc":"current time"},{"type":"number","name":"end","desc":"end time"}],"desc":"Set up the Camera to interpolate between the two given time values.","name":"interpolateView"},{"params":[],"desc":"Update the Camera.","name":"update"},{"params":[],"desc":"Update the Camera view projection.","name":"updateProjection"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"A Camera controls the point of view and perspective when viewing a 3D scene.","name":"hemi.view.Camera"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the CameraCurve.","name":"cleanup"},{"ret":{"type":"Object","desc":"the Octane structure representing this CameraCurve"},"params":[],"desc":"Get the Octane structure for this CameraCurve.","name":"toOctane"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"A CameraCurve contains an \"eye\" Curve and a \"target\" Curve that allow a Camera to follow a smooth path through several waypoints.","name":"hemi.view.CameraCurve"},{"funcs":[{"ret":{"type":"hemi.view.ViewData","desc":"the ViewData for the Viewpoint"},"params":[],"desc":"Get the data contained within the Viewpoint.","name":"getData"},{"params":[{"type":"hemi.view.ViewData","name":"viewData","desc":"data to set for the Viewpoint"}],"desc":"Set the data for the Viewpoint.","name":"setData"},{"ret":{"type":"Object","desc":"the Octane structure representing this Viewpoint"},"params":[],"desc":"Get the Octane structure for this Viewpoint.","name":"toOctane"}],"props":[{"type":"ing","desc":"Overwrites hemi.world.Citizen.citizenType","name":"citizenType"}],"parent":"hemi.world.Citizen","desc":"A Viewpoint describes everything needed for a view - eye, target, up axis, field of view, near plane, and far plane.","name":"hemi.view.Viewpoint"},{"funcs":[],"props":[],"desc":"A ClientSize contains the height and width of the O3D client and updates camera projections when either value changes.","name":"hemi.view.ClientSize"},{"funcs":[{"ret":{"type":"string","desc":"the type"},"params":[],"desc":"Get the Citizen's type (similar to class in Java).","name":"getCitizenType"},{"params":[{"type":"string","name":"type","desc":"the type to set"}],"desc":"Set the Citizen's type (similar to class in Java).","name":"setCitizenType"},{"ret":{"type":"number","desc":"the id"},"params":[],"desc":"Get the Citizen's id.","name":"getId"},{"params":[{"type":"number","name":"id","desc":"the id to set"}],"desc":"Set the Citizen's id.","name":"setId"},{"params":[],"desc":"Send a cleanup Message and remove the Citizen from the World. Subclasses should extend this so that it removes all references to the Citizen.","name":"cleanup"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform"}],"desc":"Receive the given Transform from the TransformRegistry.","name":"receiveTransform"},{"ret":{"type":"hemi.dispatch.MessageTarget","desc":"the created MessageTarget"},"params":[{"type":"string","name":"type","desc":"type of Message to handle"},{"type":"Object","name":"handler","desc":"either a function or an object"},{"type":"string","name":"opt_func","desc":"name of the function to call if handler is an object"},{"type":"string[]","name":"opt_args","desc":"optional array of names of arguments to pass to the handler. Otherwise the entire Message is just passed in."}],"desc":"Register the given handler to receive Messages of the specified type from the Citizen. This creates a MessageTarget.","name":"subscribe"},{"ret":{"type":"hemi.dispatch.MessageTarget","desc":"the created MessageTarget"},"params":[{"type":"Object","name":"handler","desc":"either a function or an object"},{"type":"string","name":"opt_func","desc":"name of the function to call if handler is an object"},{"type":"string[]","name":"opt_args","desc":"optional array of names of arguments to pass to the handler. Otherwise the entire Message is just passed in."}],"desc":"Register the given handler to receive Messages of all types from the Citizen. This creates a MessageTarget.","name":"subscribeAll"},{"ret":{"type":"hemi.dispatch.MessageTarget","desc":"the removed MessageTarget or null"},"params":[{"type":"hemi.dispatch.MessageTarget","name":"target","desc":"the MessageTarget to remove from the Dispatch"},{"type":"string","name":"opt_type","desc":"Message type the MessageTarget was registered for"}],"desc":"Remove the given MessageTarget for Messages of the specified type for the Citizen.","name":"unsubscribe"},{"params":[{"type":"string","name":"type","desc":"type of Message"},{"type":"Object","name":"data","desc":"container for any and all information relevant to the Message"}],"desc":"Send a Message with the given attributes from the Citizen to any registered MessageTargets.","name":"send"},{"ret":{"type":"Object","desc":"the Octane structure representing the Citizen"},"params":[],"desc":"Get the Octane structure for the Citizen. The structure returned is: <pre> { id: the Citizen's world id type: the Citizen's type props: the Citizen's properties (name and id/value) init: a function of the Citizen to execute after it is loaded } </pre>","name":"toOctane"}],"props":[{"type":"string","desc":"Essentially a class name for Citizens.","name":"citizenType"},{"type":"string[]","desc":"Array of Hemi Messages that the Citizen is known to send.","name":"msgSent"},{"name":"name","desc":"The name of the Citizen.","type":"string"}],"desc":"A Citizen is a uniquely identifiable member of a World that is able to send Messages through the World's dispatch. The Citizen's id is all that is necessary to retrieve the Citizen from its World, regardless of its type.","name":"hemi.world.Citizen"},{"funcs":[{"params":[],"desc":"Distribute the Transforms of the owning Citizen to any other Citizens that have registered interest in those Transforms.","name":"distribute"},{"ret":{"type":"Object","desc":"the fetched or created entry"},"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform to get the entry for"}],"desc":"Get the entry for the given Transform or create one if it does not already exist.","name":"getEntry"},{"params":[],"desc":"Load the entries restored from Octane into the TransformOwner.","name":"load"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform to give"},{"type":"hemi.world.Citizen","name":"target","desc":"the Citizen to receive it"}],"desc":"Register the given Citizen to receive the given Transform when it becomes available during Octane loading.","name":"register"},{"ret":{"type":"Object","desc":"the Octane structure representing the TransformOwner"},"params":[],"desc":"Get the Octane structure for the TransformOwner.","name":"toOctane"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform in the entry"},{"type":"hemi.world.Citizen","name":"target","desc":"the Citizen in the entry"}],"desc":"Remove the entry for the given Citizen and Transform.","name":"unregister"}],"props":[],"desc":"A TransformOwner contains a Citizen that owns at least one Transform and entries of other Citizens that need to be given any of those Transforms as they become available during Octane loading.","name":"hemi.world.TransformOwner"},{"funcs":[{"params":[{"type":"hemi.world.Citizen","name":"citizen","desc":"the Citizen to distribute Transforms for"}],"desc":"Distribute the Transforms of the given Citizen to any other Citizens that have registered interest in those Transforms.","name":"distribute"},{"ret":{"type":"hemi.world.TransformOwner","desc":"the fetched or created entry"},"params":[{"type":"hemi.world.Citizen","name":"citizen","desc":"the Citizen to get the entry for"}],"desc":"Get the TransformOwner entry for the given Citizen or create one if it does not already exist.","name":"getOwner"},{"params":[],"desc":"Load the entries restored from Octane into the TransformRegistry.","name":"load"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform to give"},{"type":"hemi.world.Citizen","name":"target","desc":"the Citizen to receive it"}],"desc":"Register the given Citizen to receive the given Transform when it becomes available during Octane loading.","name":"register"},{"ret":{"type":"Object","desc":"the Octane structure representing the TransformRegistry"},"params":[],"desc":"Get the Octane structure for the TransformRegistry.","name":"toOctane"},{"params":[{"type":"o3d.Transform","name":"transform","desc":"the Transform in the entry"},{"type":"hemi.world.Citizen","name":"target","desc":"the Citizen in the entry"}],"desc":"Remove the entry for the given Citizen and Transform.","name":"unregister"}],"props":[],"desc":"A TransformRegistry maintains listings of which Transforms to distribute to which Citizens as they become available during Octane loading. This is necessary because Transforms are not proper Citizens.","name":"hemi.world.TransformRegistry"},{"funcs":[{"params":[],"desc":"Send a cleanup Message and remove all references in the ValueCheck.","name":"cleanup"},{"params":[{"type":"hemi.dispatch.Message","name":"message","desc":"the Message to handle"}],"desc":"Check the specified value parameters against the specified values to determine if the given Message should be passed to the handler object.","name":"handleMessage"},{"ret":{"type":"Object","desc":"the Octane structure representing the ValueCheck"},"params":[],"desc":"Get the Octane structure for the ValueCheck.","name":"toOctane"}],"props":[{"desc":"Overwrites hemi.world.Citizen.citizenType.","name":"citizenType"},{"name":"citizen","desc":"A Citizen that the ValueCheck may be using.","type":"hemi.world.Citizen"},{"name":"values","desc":"The values to check for.","type":"Object[]"},{"name":"valueParams","desc":"The parameter names to use to get the values to check.","type":"string[]"},{"name":"handler","desc":"The handler object for the Message.","type":"Object"},{"name":"func","desc":"The name of the object function to pass the Message to.","type":"string"},{"name":"args","desc":"Optional array to specify arguments to pass to the handler. Otherwise just pass it the Message.","type":"string[]"}],"parent":"hemi.world.Citizen","desc":"A ValueCheck handler checks a set of values against a specified set of values from the Message to handle. If the values all match, the Message is passed to the actual handler.","name":"hemi.handlers.ValueCheck"},{"funcs":[{"ret":{"type":"Object[]","desc":"an array of matching values"},"params":[{"type":"Object","name":"attributes","desc":"a set of attributes to search for"}],"desc":"Search the Hashtable for values with attributes that match the given set of attributes. The attributes may be single values or arrays of values which are alternatives.","name":"query"}],"props":[],"parent":"Hashtable","desc":"A Hemi Hashtable extends a Hashtable to allow it to be queried for Object attributes that are not the Hash key.","name":"hemi.utils.Hashtable"}]