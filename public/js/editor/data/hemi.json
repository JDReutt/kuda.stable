[{"funcs":[],"props":[{"name":"iterations","desc":"The number of times the Loop repeats.","type":"number"},{"name":"name","desc":"The name of the Loop.","type":"string"},{"name":"startTime","desc":"The time in an Animation that the Loop begins at.","type":"number"},{"name":"stopTime","desc":"The time in an Animation that the Loop ends at.","type":"number"}],"msgs":[],"desc":"A Loop contains a start time and stop time as well as the number of iterations to perform for the Loop.","name":"hemi.Loop"},{"funcs":[{"params":[{"type":"hemi.Loop","name":"loop","desc":"the Loop to add"}],"desc":"Add the given Loop to the AnimationGroup.","name":"addLoop"},{"params":[{"type":"Object","name":"event","desc":"event containing information about the render"}],"desc":"Update the AnimationGroup's current time with the amount of elapsed time in the render event. Update the AnimationGroup's animations with the current animation time.","name":"onRender"},{"ret":{"type":"hemi.Loop","desc":"the removed Loop or null"},"params":[{"type":"hemi.Loop","name":"loop","desc":"the Loop to remove"}],"desc":"Remove the given Loop from the AnimationGroup.","name":"removeLoop"},{"params":[],"desc":"Reset the AnimationGroup and its Loops to their initial states.","name":"reset"},{"params":[],"desc":"If the AnimationGroup is not currently animating, start it.","name":"start"},{"params":[],"desc":"If the AnimationGroup is currently running, stop it.","name":"stop"}],"props":[{"name":"model","desc":"The model used in animation. Contains the THREE.KeyAnimations[]","type":"Hemi.Model"},{"name":"beginTime","desc":"The time the AnimationGroup begins at.","type":"number"},{"name":"endTime","desc":"The time the AnimationGroup ends at.","type":"number"},{"name":"loops","desc":"Any loops in the AnimationGroup.","type":"hemi.Loop[]"}],"msgs":[{"name":"start","desc":"the AnimationGroup starts"},{"name":"stop","desc":"the AnimationGroup finishes or is stopped"}],"desc":"An AnimationGroup contains a group of animations to animate together as well as Loops for repeating sections of the AnimationGroup.","name":"hemi.AnimationGroup"},{"funcs":[{"params":[{"type":"string","name":"url","desc":"the URL of the audio file"},{"type":"string","name":"type","desc":"the type of the audio file (ogg, mpeg, etc)"}],"desc":"Add the given URL as a source for the audio file to load.","name":"addUrl"},{"ret":{"type":"number","desc":"length of media in seconds"},"params":[],"desc":"Get the length of the current audio media.","name":"getDuration"},{"ret":{"type":"number","desc":"the current volume"},"params":[],"desc":"Get the current volume of the audio media. Volume ranges from 0.0 to  1.0.","name":"getVolume"},{"params":[],"desc":"Pause the audio media if it is currently playing.","name":"pause"},{"params":[],"desc":"Play the audio media if it is not already doing so. If the media is in the middle of a seek operation, the Audio will wait until it finishes before playing.","name":"play"},{"params":[{"type":"string","name":"url","desc":"the URL to remove"}],"desc":"Remove the given URL as a source for the audio file to load.","name":"removeUrl"},{"params":[{"type":"number","name":"time","desc":"the time to seek to in seconds"}],"desc":"Set the audio media's current time to the given time. If the media is currently playing, it will pause until the seek operation finishes.","name":"seek"},{"params":[{"type":"boolean","name":"looping","desc":"flag to indicate if the media should loop"}],"desc":"Set if the audio media should loop when it ends.","name":"setLoop"},{"params":[{"type":"number","name":"volume","desc":"the volume to set"}],"desc":"Set the volume of the audio media. Volume ranges from 0.0 to 1.0.","name":"setVolume"}],"props":[{"name":"audio","desc":"The actual audio DOM element.","type":"Object"},{"name":"looping","desc":"Flag indicating if the Audio should loop when it ends.","type":"boolean"}],"msgs":[{"name":"load","desc":"the Audio's media content is loaded"},{"name":"start","desc":"the Audio starts playing"},{"name":"stop","desc":"the Audio finishes playing"},{"name":"unload","desc":"the Audio's media content is unloaded"}],"desc":"An Audio contains an audio DOM element that can be played, paused, etc.","name":"hemi.Audio"},{"funcs":[{"params":[],"desc":"Add a quick grid to the XZ plane of the Client's Scene.","name":"addGrid"},{"ret":{"type":"THREE.Ray","desc":"the new ray"},"params":[{"type":"number","name":"x","desc":"x screen coordinate"},{"type":"number","name":"y","desc":"y screen coordinate"}],"desc":"Create a ray from the Camera's position, through the given screen coordinates, and into the 3D scene.","name":"castRay"},{"ret":{"type":"number","desc":"width of the client viewport"},"params":[],"desc":"Get the width of the client's viewport in pixels.","name":"getWidth"},{"ret":{"type":"number","desc":"height of the client viewport"},"params":[],"desc":"Get the height of the client's viewport in pixels.","name":"getHeight"},{"params":[],"desc":"Use the Client's renderer to render its Scene from the perspective of its Camera.","name":"onRender"},{"params":[{"type":"number","name":"hex","desc":"the background color in hex"},{"type":"number","name":"opt_alpha","desc":"optional alpha value between 0 and 1"}],"desc":"Set the color and opacity of the background of the Client.","name":"setBGColor"},{"params":[{"type":"hemi.Camera","name":"the","desc":"new Camera to use"}],"desc":"Set the given Camera to be the viewing Camera for the Client.","name":"setCamera"},{"params":[{"type":"THREE.WebGLRenderer","name":"renderer","desc":"renderer to use"}],"desc":"Set the given renderer for the Client to use. Typically a WebGLRenderer.","name":"setRenderer"},{"params":[{"type":"hemi.Scene","name":"scene","desc":"scene to render"}],"desc":"Set the given Scene for the Client to render.","name":"setScene"},{"params":[{"type":"boolean","name":"useLight","desc":"flag indicating if Camera light should be used"}],"desc":"Set whether the Client should use the Camera's light (always the same position and direction as the Camera to guarantee visibility).","name":"useCameraLight"}],"props":[{"name":"camera","desc":"The Camera that represents the viewing position and direction.","type":"hemi.Camera"},{"name":"scene","desc":"The Scene containing all 3D elements to be rendered.","type":"hemi.Scene"},{"name":"picker","desc":"The Picker that manages mouse picking of 3D elements.","type":"hemi.Picker"},{"name":"renderer","desc":"The renderer which performs the actual work to render a 3D image.","type":"THREE.WebGLRenderer"}],"msgs":[],"desc":"Client represents a viewable 3D element on a webpage. It encapsulates all of the single components necessary for rendering such as Scene and Camera.","name":"hemi.Client"},{"funcs":[],"props":[{"name":"min","desc":"The minimum XYZ point","type":"THREE.Vector3"},{"name":"max","desc":"The maximum XYZ point","type":"THREE.Vector3"}],"msgs":[],"desc":"A BoundingBox is defined by a minimum XYZ point and a maximum XYZ point.","name":"hemi.BoundingBox"},{"funcs":[{"params":[{"type":"number","name":"samples","desc":"the number of samples to use to draw"},{"type":"Object","name":"config","desc":"configuration for how the Curve should look"}],"desc":"Draw the Curve using primitive shapes.","name":"draw"},{"ret":{"type":"THREE.Vector3","desc":"the position of the last waypoint"},"params":[],"desc":"Get the XYZ position of the last waypoint of the Curve.","name":"getEnd"},{"ret":{"type":"THREE.Vector3","desc":"the position of the first waypoint"},"params":[],"desc":"Get the XYZ position of the first waypoint of the Curve.","name":"getStart"},{"ret":{"type":"THREE.Vector3","desc":"the position interpolated from the time input"},"params":[{"type":"number","name":"t","desc":"time (usually between 0 and 1)"}],"desc":"Base interpolation function for this curve. Usually overwritten.","name":"interpolate"},{"params":[{"type":"Object","name":"cfg","desc":"configuration options for the Curve"}],"desc":"Load the given configuration options into the Curve.","name":"loadConfig"},{"params":[{"type":"hemi.CurveType","name":"type","desc":"interpolation type"}],"desc":"Set the type of interpolation for the Curve.","name":"setType"}],"props":[],"msgs":[],"desc":"A Curve is used to represent and calculate different interpolation curves including linear, bezier, cardinal, and cubic hermite.","name":"hemi.Curve"},{"funcs":[{"params":[],"desc":"Hide the ParticleCurve's waypoint boxes from view.","name":"hideBoxes"},{"params":[{"type":"Object","name":"cfg","desc":"configuration options: aim: flag to indicate particles should orient with curve boxes: array of bounding boxes for particle curves to pass through colors: array of values for particle color ramp (use this or colorKeys) colorKeys: array of time keys and values for particle color ramp life: lifetime of particle system (in seconds) particleCount: number of particles to allocate for system particleShape: hemi.ShapeType pre defined shape type customMesh: Custom mesh for particles CANNOT BE OCTANED CURRENTLY* scales: array of values for particle scale ramp (use this or scaleKeys) scaleKeys: array of time keys and values for particle size ramp tension: tension parameter for the curve (typically from -1 to 1) trail: flag to indicate system should have trailing start and stop"}],"desc":"Load the given configuration object and set up the ParticleCurve.","name":"loadConfig"},{"params":[{"type":"Object","name":"e","desc":"the render event"}],"desc":"Update the particles on each render.","name":"onRender"},{"params":[],"desc":"Pause the ParticleCurve.","name":"pause"},{"params":[],"desc":"Resume the ParticleCurve.","name":"play"},{"params":[{"type":"boolean","name":"aim","desc":"flag indicating if particles should aim along the curve"}],"desc":"Set whether or not particles should orient themselves along the curve they are following.","name":"setAim"},{"params":[{"type":"hemi.BoundingBox[]","name":"boxes","desc":"array of boxes defining volumetric waypoints for the ParticleCurve"}],"desc":"Set the bounding boxes that define waypoints for the ParticleCurve's curves.","name":"setBoxes"},{"params":[{"type":"number[4][]","name":"colors","desc":"array of RGBA color values"}],"desc":"Set the color ramp for the particles as they travel along the curve.","name":"setColors"},{"params":[{"type":"Object[]","name":"colorKeys","desc":"array of color keys, sorted into ascending key order"}],"desc":"Set the color ramp for the particles as they travel along the curve, specifying the interpolation times for each color.","name":"setColorKeys"},{"params":[{"type":"THREE.Material","name":"material","desc":"the material to use for particles"}],"desc":"Set the material to use for the particles. Note that the material's shader will be modified for the ParticleCurve.","name":"setMaterial"},{"params":[{"type":"number","name":"numPtcs","desc":"number of particles"}],"desc":"Set the total number of particles for the ParticleCurve to create.","name":"setParticleCount"},{"params":[{"type":"hemi.Mesh","name":"mesh","desc":"the mesh containing the shape geometry to use"}],"desc":"Set the shape of the particles to the given shape geometry. This may take some time as a new vertex buffer gets created.","name":"setParticleMesh"},{"params":[{"type":"Object","name":"shapeConfig","desc":"properties of the shape to create"}],"desc":"Sets the particle Mesh to a hemi.Shape. See hemi.createShape() for more details.","name":"setParticleShape"},{"params":[{"type":"THREE.Vector3[]","name":"scales","desc":"array of XYZ scale values"}],"desc":"Set the scale ramp for the particles as they travel along the curve.","name":"setScales"},{"params":[{"type":"Object[]","name":"scaleKeys","desc":"array of scale keys, sorted into ascending key order"}],"desc":"Set the scale ramp for the particles as they travel along the curve, specifying the interpolation times for each scale.","name":"setScaleKeys"},{"params":[{"type":"number","name":"tension","desc":"tension value (typically from -1 to 1)"}],"desc":"Set the tension parameter for the curve. This controls how round or straight the curve sections are.","name":"setTension"},{"params":[],"desc":"Render the waypoint boxes which the curves run through (helpful for debugging).","name":"showBoxes"},{"params":[],"desc":"Start the ParticleCurve.","name":"start"},{"params":[],"desc":"Stop the ParticleCurve.","name":"stop"},{"params":[{"type":"number","name":"x","desc":"amount to translate in the X direction"},{"type":"number","name":"y","desc":"amount to translate in the Y direction"},{"type":"number","name":"z","desc":"amount to translate in the Z direction"}],"desc":"Translate the entire particle system by the given amounts","name":"translate"}],"props":[{"name":"active","desc":"Flag indicating if the ParticleCurve is currently running.","type":"boolean"},{"name":"client","desc":"The Client that the ParticleCurve is being rendered by.","type":"hemi.Client"},{"name":"life","desc":"The lifetime of the ParticleCurve. This is the amount of time it takes a particle to travel from the first waypoint to the last.","type":"number"}],"msgs":[],"desc":"A ParticleCurve is a particle system that uses volumetric waypoints (boxes) to create curved paths for particles to follow.","name":"hemi.ParticleCurve"},{"funcs":[{"params":[{"type":"Object","name":"e","desc":"the render event"}],"desc":"Update the particles on each render.","name":"onRender"},{"params":[],"desc":"Resume the ParticleCurveTrail.","name":"play"},{"params":[],"desc":"Start the ParticleCurveTrail.","name":"start"},{"params":[{"type":"boolean","name":"opt_hard","desc":"optional flag to indicate a hard stop (all particles disappear at once)"}],"desc":"Stop the ParticleCurveTrail.","name":"stop"}],"props":[],"msgs":[],"parent":"hemi.ParticleCurve","desc":"A ParticleCurve that has trailing starts and stops.","name":"hemi.ParticleCurveTrail"},{"funcs":[],"props":[{"name":"src","desc":"The Message originator.","type":"hemi.world.Citizen"},{"name":"msg","desc":"The type of the Message.","type":"string"},{"name":"data","desc":"Container for any and all Message data.","type":"Object"}],"msgs":[],"desc":"A Message is sent whenever an event occurs.","name":"Message"},{"funcs":[{"params":[{"type":"hemi.dispatch.MessageTarget","name":"target","desc":"the target to add"}],"desc":"Register the given MessageTarget with the MessageSpec.","name":"addTarget"},{"params":[],"desc":"Clean up the MessageSpec so all references in it are removed.","name":"cleanup"},{"ret":{"type":"hemi.dispatch.MessageTarget","desc":"the removed target or null"},"params":[{"type":"hemi.dispatch.MessageTarget","name":"target","desc":"the target to remove"}],"desc":"Remove the given MessageTarget from the MessageSpec.","name":"removeTarget"},{"ret":{"type":"string","desc":"the hash key"},"params":[],"desc":"Get the unique hash key for the MessageSpec.","name":"getHash"}],"props":[{"name":"src","desc":"The id of the Message originator to handle Messages from. This can also be hemi.dispatch.WILDCARD to match all source ids.","type":"number"},{"name":"msg","desc":"The type of Message to handle. This can also be hemi.dispatch.WILDCARD to match all Message types.","type":"string"},{"name":"targets","desc":"The MessageTargets to pass Messages with matching source ids and types.","type":"hemi.dispatch.MessageTarget[]"}],"msgs":[],"desc":"A MessageSpec specifies a certain Message type and source and contains a set of MessageTargets that have registered to receive Messages with matching specs.","name":"hemi.dispatch.MessageSpec"},{"funcs":[{"params":[],"desc":"Clean up the MessageTarget so all references in it are removed.","name":"cleanup"}],"props":[{"name":"_dispatchId","desc":"The id of the MessageTarget.","type":"number"},{"name":"name","desc":"The name of the MessageTarget.","type":"string"},{"name":"handler","desc":"The handler for Messages passed through a MessageSpec. It may be an object or function.","type":"Object || function"},{"name":"func","desc":"The name of the object function to call if handler is an object.","type":"string"},{"name":"args","desc":"Optional array to specify arguments to pass to the handler. Otherwise just pass it the Message.","type":"string[]"}],"msgs":[],"desc":"A MessageTarget registers with a MessageSpec to receive Messages that match its attributes.","name":"hemi.dispatch.MessageTarget"},{"funcs":[],"props":[{"name":"name","desc":"The name of the predefined parameter setting function.","type":"hemi.ParticleFunctionIds"},{"name":"options","desc":"A set of options to customize values that the function uses to calculate the particle parameters.","type":"Object"}],"msgs":[],"desc":"A ParticleFunction specifies a predefined per-particle parameter setting function and any properties it might require.","name":"hemi.ParticleFunction', ['name', 'options"},{"funcs":[{"params":[],"desc":"Set the ParticleEmitter to not be visible.","name":"hide"},{"params":[],"desc":"Set the particles up for the ParticleEmitter.","name":"setup"},{"params":[],"desc":"Set the ParticleEmitter to be visible.","name":"show"}],"props":[{"name":"blending","desc":"The blending state to use for drawing particles.","type":"number"},{"name":"colorRamp","desc":"An array of colors for each particle to transition through. Each color value is in the form RGBA.","type":"number[]"},{"name":"params","desc":"A set of parameters for the ParticleEmitter.","type":"hemi.particles.Spec"},{"name":"particleFunction","desc":"Optional specs that identify a particle updating function to use and properties to set for it.","type":"hemi.ParticleFunctionIds"}],"msgs":[{"name":"visible","desc":"the ParticleEmitter is shown or hidden"}],"desc":"A ParticleEmitter constantly generates particles.","name":"hemi.ParticleEmitter"},{"funcs":[{"params":[],"desc":"Set the particles up for the ParticleBurst.","name":"setup"},{"params":[],"desc":"Generate the particles for the ParticleBurst.","name":"trigger"}],"props":[],"msgs":[{"name":"burst","desc":"the ParticleBurst effect is triggered"}],"parent":"hemi.ParticleEmitter","desc":"A ParticlesBurst generates one set of particles at a time. It can be used for a smoke puff, explosion, firework, water drip, etc.","name":"hemi.ParticleBurst"},{"funcs":[{"params":[{"type":"Object","name":"event","desc":"the render event"}],"desc":"Render event handling function that allows the ParticleTrail to animate.","name":"onRender"},{"params":[],"desc":"Set the particle emitter up for the ParticleTrail.","name":"setup"},{"params":[],"desc":"Start animating the ParticleTrail. It will generate particles based upon its fireInterval property.","name":"start"},{"params":[],"desc":"Stop animating the ParticleTrail.","name":"stop"}],"props":[],"msgs":[{"name":"start","desc":"the ParticleTrail effect starts generating particles"},{"name":"stop","desc":"the ParticleTrail effect stops generating particles"}],"parent":"hemi.ParticleEmitter","desc":"A ParticleTrail is a particle effect that can be started and stopped like an animation. It can be used for effects like exhaust.","name":"hemi.ParticleTrail"},{"funcs":[{"params":[],"desc":"Set the HudTheme as the current theme for HUD displays.","name":"load"}],"props":[{"name":"image","desc":"Configuration options for an image foreground overlay.","type":"Object"},{"name":"","desc":"Options for a blur shadow effect on the image. Set radius to 0 to cancel.","type":"Object"},{"name":"page","desc":"Configuration options for a rectangular background overlay.","type":"Object"},{"name":"","desc":"The color and opacity of the rectangular overlay in RGBA format.","type":"number[4]"},{"name":"","desc":"The amount of curving to apply to the corners of the page. Range is from 0.0 to 1.0 where 0 is a plain rectangle and 1 is an oval.","type":"number"},{"name":"","desc":"Options for a blur shadow effect on the page. This is mutually exclusive to outline. Set radius to 0 to cancel.","type":"Object"},{"name":"","desc":"Optional outline for the page in RGBA format. This is mutually exclusive to shadow. Set to null to cancel.","type":"number[4]"},{"name":"text","desc":"Configuration options for a textual foreground overlay.","type":"Object"},{"name":"","desc":"The font size of the text.","type":"number"},{"name":"","desc":"The name of the font to use to paint the text.","type":"string"},{"name":"","desc":"The horizontal alignment of the text.","type":"string"},{"name":"","desc":"Additional styling for the text (normal, bold, italics)","type":"string"},{"name":"","desc":"Flag to indicate if the HudManager should perform strict text wrapping.","type":"boolean"},{"name":"","desc":"Number of pixels to place between lines of text.","type":"number"},{"name":"","desc":"The color and opacity of the text in RGBA format.","type":"number[4]"},{"name":"","desc":"Options for a blur shadow effect on the text. This is mutually exclusive to outline. Set radius to 0 to cancel.","type":"Object"},{"name":"","desc":"Optional outline for the text in RGBA format. This is mutually exclusive to shadow. Set to null to cancel.","type":"number[4]"},{"name":"video","desc":"Configuration options for a video foreground overlay.","type":"Object"},{"name":"","desc":"Options for a blur shadow effect on the video. Set radius to 0 to cancel.","type":"Object"}],"msgs":[],"desc":"A HudTheme contains configuration options for displaying HUD elements like pages and text.","name":"hemi.HudTheme"},{"funcs":[{"params":[],"desc":"Remove all references in the HudElement.","name":"cleanup"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of this HudElement, otherwise false"},"params":[{"type":"Object","name":"event","desc":"the event that occurred"}],"desc":"If the given Event occurred within the bounds of this HudElement, call the HudElement's mouse down handler function (if one was set).","name":"onMouseDown"},{"params":[{"type":"Object","name":"event","desc":"the event that occurred"}],"desc":"If the HudElement's mouse move handler function is set, pass it the given Event and if it occurred within the bounds of this HudElement.","name":"onMouseMove"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of this HudElement, otherwise false"},"params":[{"type":"Object","name":"event","desc":"the event that occurred"}],"desc":"If the given Event occurred within the bounds of this HudElement, call the HudElement's mouse up handler function (if one was set).","name":"onMouseUp"}],"props":[{"name":"config","desc":"Unique display options for the HudElement. All other display options will be derived from the current theme.","type":"{Object}"},{"name":"mouseDown","desc":"The handler function for mouse down events that occur within the bounds of the HudElement.","type":"function(Object): void"},{"name":"mouseUp","desc":"The handler function for mouse up events that occur within the bounds of the HudElement.","type":"function(Object): void"},{"name":"mouseMove","desc":"The handler function for mouse move events. It takes the Event and a boolean indicating if the Event occurred within the bounds of the HudElement.","type":"function(Object, boolean): void"},{"name":"visible","desc":"Allows the element to be drawn or not.","type":"boolean"}],"msgs":[],"desc":"A HudElement contains the basics of any element to be drawn on the canvas.","name":"HudElement"},{"funcs":[{"params":[],"desc":"Calculate the bounds of the formatted text.","name":"calculateBounds"},{"params":[],"desc":"Draw the formatted text.","name":"draw"},{"params":[{"type":"Object","name":"config","desc":"configuration options"}],"desc":"Set unique display options for the HudText and perform text wrapping for the new options.","name":"setConfig"},{"params":[{"type":"string","name":"text","desc":"a string or array of strings to display"}],"desc":"Set the text to display for this HudText. Perform text wrapping for the new text.","name":"setText"},{"params":[{"type":"number","name":"width","desc":"desired width for the HudText"}],"desc":"Set the desired width for the HudText. Perform text wrapping for the new width.","name":"setWidth"},{"params":[],"desc":"Perform text wrapping on the HudText's text. This sets the wrapped text, width, and height properties.","name":"wrapText"}],"props":[{"name":"x","desc":"The x-coordinate of the HudText. The actual on screen location will depend on the horizontal alignment of the text.","type":"number"},{"name":"y","desc":"The y-coordinate of the top of the HudText.","type":"number"}],"msgs":[],"parent":"HudElement","desc":"A HudText contains formated text and display options for a single area of text on the HUD.","name":"hemi.HudText"},{"funcs":[{"params":[],"desc":"Calculate the bounds of the image.","name":"calculateBounds"},{"params":[],"desc":"Remove all references in the HudImage.","name":"cleanup"},{"params":[],"desc":"Draw the image texture.","name":"draw"},{"params":[{"type":"function(hemi.HudImage):void","name":"opt_callback","desc":"optional callback function to pass the HudImage when it is done loading"}],"desc":"Load the image from the image url into a texture for the HudManager to paint. This sets the texture, height, and width properties.","name":"loadImage"},{"params":[{"type":"string","name":"url","desc":"the URL of the image file"},{"type":"function(hemi.HudImage):void","name":"opt_callback","desc":"optional callback function to pass the HudImage when it is done loading"}],"desc":"Set the URL of the image file to load and begin loading it.","name":"setUrl"}],"props":[{"name":"srcX","desc":"The x-coordinate of the source image to pull image data from.","type":"number"},{"name":"srcY","desc":"The y-coordinate of the source image to pull image data from.","type":"number"},{"name":"url","desc":"The URL of the image file.","type":"string"},{"name":"x","desc":"The x-coordinate of the left side of the HudImage.","type":"number"},{"name":"y","desc":"The y-coordinate of the top of the HudImage.","type":"number"}],"msgs":[{"name":"load","desc":"the HudImage's image data is loaded"}],"parent":"HudElement","desc":"A HudImage contains a texture and display options for a single image on the HUD.","name":"hemi.HudImage"},{"funcs":[{"params":[],"desc":"Calculate the bounds of the button.","name":"calculateBounds"},{"params":[],"desc":"Remove all references in the HudButton.","name":"cleanup"},{"params":[],"desc":"Set the HudButton's image based on its flags and then draw it.","name":"draw"},{"ret":{"type":"hemi.HudImage","desc":"the image to draw for the HudButton"},"params":[],"desc":"Get the image that represents the HudButton in its current state.","name":"getImage"},{"params":[{"type":"boolean","name":"selected","desc":"if the button is selected"}],"desc":"Set whether the HudButton is selected or not and then draw it.","name":"select"},{"params":[{"type":"Object","name":"coords","desc":"structure with optional coordinates for different images"}],"desc":"Set the source x and y coordinates for the HudButton's images.","name":"setSrcCoords"},{"params":[{"type":"Object","name":"urls","desc":"structure with optional urls for different images"}],"desc":"Set the image urls for the HudButton's images.","name":"setUrls"}],"props":[{"name":"disabledImg","desc":"The HudImage to use for the HudButton when it is disabled.","type":"hemi.HudImage"},{"name":"enabled","desc":"Flag indicating if the HudButton is enabled.","type":"boolean"},{"name":"enabledImg","desc":"The HudImage to use for the HudButton when it is enabled.","type":"hemi.HudImage"},{"name":"hovering","desc":"Flag indicating if the mouse cursor is hovering over the HudButton.","type":"boolean"},{"name":"hoverImg","desc":"The HudImage to use for the HudButton when it is enabled and the mouse cursor is hovering.","type":"hemi.HudImage"},{"name":"selected","desc":"Flag indicating if the HudButton is selected.","type":"boolean"},{"name":"selectedImg","desc":"The HudImage to use for the HudButton when it is selected.","type":"hemi.HudImage"},{"name":"x","desc":"The x-coordinate of the left side of the HudButton.","type":"number"},{"name":"y","desc":"The y-coordinate of the top of the HudButton.","type":"number"},{"name":"mouseMove","desc":"The built-in mouse move handler for a HudButton. If the mouse move occurred within the button's bounds, set it's hovering flag and redraw the button.","type":"built-in mouse move handler for a HudButton. If the mouse move occurred within the button's bounds, set it's hovering flag and redraw the button."}],"msgs":[],"parent":"HudElement","desc":"A HudButton uses different images based on if the button is enabled or if a mouse is hovering over it, etc.","name":"hemi.HudButton"},{"funcs":[{"params":[{"type":"string","name":"url","desc":"the URL of the video file"},{"type":"string","name":"type","desc":"the type of the video file (ogv, mp4, etc)"}],"desc":"Add the given URL as a source for the video file to load.","name":"addUrl"},{"params":[],"desc":"Calculate the bounds of the video.","name":"calculateBounds"},{"params":[],"desc":"Remove all references in the HudElement.","name":"cleanup"},{"params":[],"desc":"Draw the video's current image.","name":"draw"},{"params":[{"type":"string","name":"url","desc":"the URL to remove"}],"desc":"Remove the given URL as a source for the video file to load.","name":"removeUrl"},{"params":[{"type":"number","name":"height","desc":"the height to set for the video"}],"desc":"Set the height for the video to be displayed at.","name":"setHeight"},{"params":[{"type":"number","name":"width","desc":"the width to set for the video"}],"desc":"Set the width for the video to be displayed at.","name":"setWidth"}],"props":[{"name":"x","desc":"The x-coordinate of the left side of the HudVideo.","type":"number"},{"name":"y","desc":"The y-coordinate of the top of the HudVideo.","type":"number"}],"msgs":[{"name":"load","desc":"the HudVideo's media content is loaded"}],"parent":"hemi.HudElement","desc":"A HudVideo contains video data and display options for a single video on the HUD.","name":"hemi.HudVideo"},{"funcs":[{"params":[{"type":"hemi.HudElement","name":"element","desc":"element to add"}],"desc":"Add the given HudElement to the HudPage for displaying.","name":"add"},{"params":[],"desc":"Calculate the bounds of the HudElements of the HudPage.","name":"calculateBounds"},{"params":[],"desc":"Remove all references in the HudPage.","name":"cleanup"},{"params":[],"desc":"Remove all HudElements from the HudPage.","name":"clear"},{"params":[],"desc":"Draw the background (if any) and HudElements of the HudPage.","name":"draw"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of the HudPage, otherwise false"},"params":[{"type":"Object","name":"event","desc":"the event that occurred"}],"desc":"Check if the given event occurred within the bounds of any of the HudElements of the HudPage. If it did, pass the Event to that HudElement. If not, call the HudPage's mouse down handler function (if one was set).","name":"onMouseDown"},{"params":[{"type":"Object","name":"event","desc":"the event that occurred"}],"desc":"Pass the given Event to all of the HudPage's HudElements. If the HudPage's mouse move handler function is set, pass it the Event and if it occurred within the bounds of the HudPage.","name":"onMouseMove"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of the HudPage, otherwise false"},"params":[{"type":"Object","name":"event","desc":"the event that occurred"}],"desc":"Check if the given event occurred within the bounds of any of the HudElements of the HudPage. If it did, pass the Event to that HudElement. If not, call the HudPage's mouse up handler function (if one was set).","name":"onMouseUp"},{"ret":{"type":"hemi.HudElement","desc":"the removed element or null"},"params":[{"type":"hemi.HudElement","name":"element","desc":"element to remove"}],"desc":"Remove the specified HudElement from the HudPage.","name":"remove"},{"params":[{"type":"number","name":"top","desc":"the y coordinate of the top"},{"type":"number","name":"bottom","desc":"the y coordinate of the bottom"},{"type":"number","name":"left","desc":"the x coordinate of the left"},{"type":"number","name":"right","desc":"the x coordinate of the right"}],"desc":"Manually set the size of the HudPage. This will prevent it from  autosizing itself to fit all of the HudElements added to it.","name":"setSize"}],"props":[{"name":"auto","desc":"Flag indicating if the HudPage should automatically set its size to contain all of its elements.","type":"boolean"},{"name":"drawBackground","desc":"Flag indicating if a background rectangle should be drawn for the HudPage.","type":"boolean"},{"name":"margin","desc":"The number of pixels to add as padding around the bounds of the HudPage's elements when drawing the background rectangle.","type":"number"}],"msgs":[],"parent":"hemi.HudElement","desc":"A HudPage contains other HudElements and display options for  drawing a single page on the HUD.","name":"hemi.HudPage"},{"funcs":[{"params":[{"type":"hemi.HudPage","name":"page","desc":"page to add"}],"desc":"Add the given HudPage to the HudDisplay.","name":"add"},{"params":[],"desc":"Remove all HudPages from the HudDisplay.","name":"clear"},{"ret":{"type":"hemi.HudPage","desc":"currently displayed page"},"params":[],"desc":"Get the currently displayed HudPage.","name":"getCurrentPage"},{"ret":{"type":"number","desc":"the number of HudPages"},"params":[],"desc":"Get the number of HudPages in the HudDisplay.","name":"getNumberOfPages"},{"params":[],"desc":"Hide the HudDisplay and unregister its key and mouse handlers.","name":"hide"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of a HudPage, otherwise false"},"params":[{"type":"Object","name":"event","desc":"the event that occurred"}],"desc":"Pass the given mouse down Event to the currently displayed HudPage (if there is one).","name":"onMouseDown"},{"params":[{"type":"Object","name":"event","desc":"the event that occurred"}],"desc":"Pass the given mouse move Event to the currently displayed HudPage (if there is one).","name":"onMouseMove"},{"ret":{"type":"boolean","desc":"true if the event occurred within the bounds of a HudPage, otherwise false"},"params":[{"type":"Object","name":"event","desc":"the event that occurred"}],"desc":"Pass the given mouse up Event to the currently displayed HudPage (if there is one).","name":"onMouseUp"},{"params":[],"desc":"Display the next HudPage in the HudDisplay.","name":"nextPage"},{"params":[],"desc":"Display the previous HudPage in the HudDisplay.","name":"previousPage"},{"ret":{"type":"hemi.HudPage","desc":"the removed page or null"},"params":[{"type":"hemi.HudPage","name":"page","desc":"page to remove"}],"desc":"Remove the specified HudPage from the HudDisplay.","name":"remove"},{"params":[],"desc":"Show the first HudPage of the HudDisplay and bind the mouse handlers for interaction.","name":"show"},{"params":[],"desc":"Show the current page of the HudDisplay.","name":"showPage"}],"props":[],"msgs":[{"name":"visible","desc":"the HudDisplay shows a page or is hidden"}],"desc":"A HudDisplay contains one or more HudPages to display sequentially.","name":"hemi.HudDisplay"},{"funcs":[{"params":[{"type":"hemi.Client","name":"client","desc":"the Client to start managing"}],"desc":"Set up a 2D canvas for the given Client and add it to the list of Clients that the HudManager draws to.","name":"addClient"},{"params":[],"desc":"Clear the current overlays from the HUD.","name":"clearDisplay"},{"params":[{"type":"hemi.HudElement","name":"element","desc":"element with a bounding box to display"},{"type":"Object","name":"boxConfig","desc":"unique configuration options for the rectangular overlay"}],"desc":"Create a rectangular overlay from the given HudElement.","name":"createRectangleOverlay"},{"params":[{"type":"hemi.HudText","name":"text","desc":"the HudText to display"},{"type":"Object","name":"textConfig","desc":"unique configuration options for the text overlay"}],"desc":"Create a text overlay.","name":"createTextOverlay"},{"params":[{"type":"hemi.HudImage","name":"image","desc":"the HudImage to display"},{"type":"Object","name":"imgConfig","desc":"unique configuration options for the image overlay"}],"desc":"Create an image overlay.","name":"createImageOverlay"},{"params":[{"type":"hemi.HudVideo","name":"video","desc":"the HudVideo to display"},{"type":"Object","name":"vidConfig","desc":"unique configuration options for the video overlay"}],"desc":"Create a video overlay.","name":"createVideoOverlay"},{"ret":{"type":"Object","desc":"wrapped text object"},"params":[{"type":"string","name":"text","desc":"the text to display"},{"type":"number","name":"width","desc":"the maximum line width before wrapping"},{"type":"Object","name":"textOptions","desc":"unique configuration options for the text overlay"}],"desc":"Calculate text wrapping and format the given string.","name":"doTextWrapping"},{"params":[{"type":"hemi.HudElement","name":"element","desc":"element with a bounding box to create the rectangle from"},{"type":"number","name":"curveFactor","desc":"amount of curving on the corners (between 0 and 0.5)"},{"type":"boolean","name":"fill","desc":"flag indicating whether to fill or stroke"}],"desc":"Draw a rectangular overlay that has rounded corners from the given HudElement.","name":"drawRoundRect"},{"params":[{"type":"Object","name":"renderEvent","desc":"event containing render info"}],"desc":"Copy the current image from any video elements onto the canvas on each render.","name":"onRender"},{"params":[],"desc":"Reset the text baseline value for all clients to 'top' (the default for the HudManager).","name":"resetTextBaseline"},{"params":[{"type":"hemi.Client","name":"client","desc":"the client to draw to"}],"desc":"Set the current client for the HudManager to draw to.","name":"setClient"}],"props":[{"name":"currentContext","desc":"","type":"current 2D canvas context that the HudManager is drawing to."}],"msgs":[],"desc":"A HudManager creates the appropriate view components for  rendering a HUD.","name":"HudManager"},{"funcs":[{"params":[{"type":"hemi.Transform","name":"transform","desc":"the transform to add"}],"desc":"Add a Transform to the list of Manipulator Transforms.","name":"addTransform"},{"params":[],"desc":"Clear the list of Manipulator Transforms.","name":"clearTransforms"},{"ret":{"type":"boolean","desc":"true if the Transform is found"},"params":[{"type":"hemi.Transform","name":"transform","desc":"transform to check against"}],"desc":"Check if a given Transform is contained within the children of the Transforms acted upon by the Manipulator.","name":"containsTransform"},{"params":[],"desc":"Disable mouse interaction for the Manipulator.","name":"disable"},{"params":[],"desc":"Enable mouse interaction for the Manipulator.","name":"enable"},{"params":[{"type":"Object","name":"event","desc":"the mouse up event"}],"desc":"Stop manipulating transforms.","name":"onMouseUp"},{"params":[{"type":"hemi.Transform","name":"transform","desc":"the Transform to remove"}],"desc":"Remove the given Transform from the Manipulator.","name":"removeTransform"}],"props":[{"name":"_client","desc":"The Client that the Manipulator's active Transform is being rendered by.","type":"hemi.Client"},{"name":"local","desc":"Flag indicating if the Manipulator should operate in the local space of the Transform it is manipulating (rather than world space).","type":"boolean"},{"name":"transforms","desc":"An array of Transforms controlled by the Manipulator.","type":"hemi.Transform[]"}],"msgs":[],"desc":"A Manipulator allows a Transform to be manipulated in some way through mouse interaction.","name":"Manipulator"},{"funcs":[{"params":[],"desc":"Clear all properties for the Movable.","name":"clear"},{"params":[],"desc":"Remove any previously set limits from the Movable.","name":"clearLimits"},{"ret":{"type":"hemi.Plane","desc":"the current plane for the Movable"},"params":[],"desc":"Get the string representation of the Movable's plane.","name":"getPlaneString"},{"params":[{"type":"Object","name":"event","desc":"the mouse move event"}],"desc":"Calculate mouse point intersection with the Movable's plane and then translate the moving Transforms accordingly.","name":"onMouseMove"},{"params":[{"type":"hemi.Mesh","name":"pickedMesh","desc":"the Mesh picked by the mouse click"},{"type":"Object","name":"mouseEvent","desc":"the mouse down event"}],"desc":"Check the picked mesh to see if the Movable should start moving its Transforms.","name":"onPick"},{"params":[{"type":"number[4]","name":"limits","desc":"an array containing [min on u, max on u, min on v, max on v]"}],"desc":"Set the relative uv limits in which this Movable can move.","name":"setLimits"},{"params":[{"type":"hemi.Plane","name":"plane","desc":"enum indicating which plane to move along"}],"desc":"Set the 2d plane on which this Movable is bound.","name":"setPlane"}],"props":[{"name":"plane","desc":"The 2D plane that the Movable's Transforms will move along.","type":"THREE.Vector3[3]"},{"name":"umin","desc":"The minimum U coordinate for the Movable on its 2D plane.","type":"number"},{"name":"umax","desc":"The maximum U coordinate for the Movable on its 2D plane.","type":"number"},{"name":"vmin","desc":"The minimum V coordinate for the Movable on its 2D plane.","type":"number"},{"name":"vmax","desc":"The maximum V coordinate for the Movable on its 2D plane.","type":"number"}],"msgs":[],"parent":"Manipulator","desc":"A Movable allows a 3D object to be moveed around the scene with the mouse, constrained to a defined 2D plane.","name":"hemi.Movable"},{"funcs":[{"params":[],"desc":"Clear all properties for the Turnable.","name":"clear"},{"params":[],"desc":"Remove any previously set limits from the Turnable.","name":"clearLimits"},{"ret":{"type":"hemi.Axis","desc":"the current axis for the Turnable"},"params":[],"desc":"Get the string representation of the Turnable's axis.","name":"getAxisString"},{"params":[{"type":"Object","name":"event","desc":"the mouse move event"}],"desc":"Calculate mouse point intersection with the Turnable's plane and then rotate the turning Transforms accordingly.","name":"onMouseMove"},{"params":[{"type":"hemi.Mesh","name":"pickedMesh","desc":"the Mesh picked by the mouse click"},{"type":"Object","name":"mouseEvent","desc":"the mouse down event"}],"desc":"Check the picked mesh to see if the Turnable should start turning its Transforms.","name":"onPick"},{"params":[{"type":"hemi.Axis","name":"axis","desc":"axis to rotate about"}],"desc":"Set the axis to which the Turnable is bound.","name":"setAxis"},{"params":[{"type":"number[2]","name":"limits","desc":"minimum and maximum angle limits (in radians)"}],"desc":"Set the limits to which the Turnable can rotate.","name":"setLimits"}],"props":[{"name":"axis","desc":"The axis that the Turnable's Transforms will turn about.","type":"THREE.Vector3"},{"name":"min","desc":"The minimum angle for the Turnable on its axis.","type":"number"},{"name":"max","desc":"The maximum angle for the Turnable on its axis.","type":"number"},{"name":"plane","desc":"The 2D plane that the Movable's Transforms will move along.","type":"THREE.Vector3[3]"}],"msgs":[],"parent":"Manipulator","desc":"A Turnable allows a Transform to be turned about an axis by the user clicking and dragging with the mouse.","name":"hemi.Turnable"},{"funcs":[{"params":[],"desc":"Clear all properties for the Resizable.","name":"clear"},{"params":[{"type":"Object","name":"event","desc":"the mouse move event"}],"desc":"Calculate mouse point intersection with the Turnable's plane and then rotate the turning Transforms accordingly.","name":"onMouseMove"},{"params":[{"type":"hemi.Mesh","name":"pickedMesh","desc":"the Mesh picked by the mouse click"},{"type":"Object","name":"mouseEvent","desc":"the mouse down event"}],"desc":"Check the picked mesh to see if the Resizable should start resizing its Transforms.","name":"onPick"},{"params":[{"type":"hemi.Axis","name":"axis","desc":"axis to resize along"}],"desc":"Set the axis along which the Resizable will resize.","name":"setAxis"}],"props":[{"name":"axis","desc":"The axis that the Resizable's Transforms will resize along.","type":"THREE.Vector3"}],"msgs":[],"parent":"Manipulator","desc":"A Resizable allows a Transform to be resized along an axis by the user clicking and dragging with the mouse.","name":"hemi.Resizable"},{"funcs":[{"ret":{"type":"number","desc":"max animation time in seconds."},"params":[],"desc":"Calculate the maximum animation time (in seconds).","name":"getMaxAnimationTime"},{"ret":{"type":"number","desc":"min animation time in seconds."},"params":[],"desc":"Calculate the minimum animation time (in seconds).","name":"getMinAnimationTime"},{"ret":{"type":"hemi.Transform[]","desc":"array of matching Transforms"},"params":[{"type":"string","name":"name","desc":"the name of the Transform to find"}],"desc":"Get any Transforms with the given name in the Model.","name":"getTransforms"},{"ret":{"type":"hemi.Transform","desc":"the first matching Transform or null"},"params":[{"type":"string","name":"name","desc":"the name of the Transform to find"}],"desc":"Get the first Transform found with the given name in the Model.","name":"getTransform"},{"params":[{"type":"Object","name":"opt_collada","desc":"optional cached object constructed by the ColladaLoader that can be used to construct a new Model without loading and parsing the asset file"}],"desc":"Load the Model's assets from its file.","name":"load"},{"params":[{"type":"string","name":"the","desc":"name of the file to load (relative to hemi.loadPath)"}],"desc":"Set the given file name as the Model's file to load. If the autoLoad flag is set, load the Model now.","name":"setFileName"},{"params":[],"desc":"Unload all of the Model's loaded transforms, geometries, etc.","name":"unload"}],"props":[{"name":"animations","desc":"Array of KeyFrameAnimations that the Model contains.","type":"THREE.KeyFrameAnimation[]"},{"name":"autoLoad","desc":"Flag indicating if the Model should load its assets when its file name is set.","type":"boolean"},{"name":"client","desc":"The Client that the Model is being rendered by.","type":"hemi.Client"},{"name":"geometries","desc":"Array of Geometries that the Model contains.","type":"THREE.Geometry[]"},{"name":"materials","desc":"Array of Materials that the Model contains.","type":"THREE.Material[]"},{"name":"root","desc":"The root Transform of the Model","type":"hemi.Transform"}],"msgs":[{"name":"animate","desc":"the Model's animation time changes"},{"name":"load","desc":"the Model's 3D data is loaded"},{"name":"unload","desc":"the Model's 3D data is unloaded"}],"desc":"A Model represents a hierarchical set of transforms, geometry, and animations that make up a 3D object.","name":"hemi.Model"},{"funcs":[{"params":[],"desc":"Clear properties like acceleration, velocity, etc.","name":"clear"},{"params":[],"desc":"Disable animation for the Rotator.","name":"disable"},{"params":[],"desc":"Enable animation for the Rotator.","name":"enable"},{"params":[{"type":"Object","name":"event","desc":"the render event"}],"desc":"Perform Newtonian calculations on the rotating object, starting with the angular velocity.","name":"onRender"},{"ret":{"type":"boolean","desc":"true if the Rotator will start turning, false if it will not"},"params":[{"type":"THREE.Vector3","name":"theta","desc":"XYZ amounts to rotate (in radians)"},{"type":"number","name":"time","desc":"number of seconds for the rotation to take"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating that no other rotations can be started until this one finishes"}],"desc":"Make the Rotator rotate the specified amount in the specified amount of time.","name":"turn"},{"params":[{"type":"THREE.Vector3","name":"acceleration","desc":"XYZ angular acceleration (in radians)"}],"desc":"Set the angular acceleration.","name":"setAcceleration"},{"params":[{"type":"THREE.Vector3","name":"theta","desc":"XYZ rotation angle (in radians)"}],"desc":"Set the current rotation angle.","name":"setAngle"},{"params":[{"type":"hemi.Transform","name":"transform","desc":"the Transform to rotate"}],"desc":"Set the given Transform for the Rotator to control rotating.","name":"setTransform"},{"params":[{"type":"THREE.Vector3","name":"velocity","desc":"XYZ angular velocity (in radians)"}],"desc":"Set the angular velocity.","name":"setVelocity"}],"props":[],"msgs":[],"desc":"A Rotator makes automated rotation easier by allowing simple calls such as setVel to begin the automated spinning of a Transform.","name":"hemi.Rotator"},{"funcs":[{"params":[],"desc":"Clear properties like acceleration, velocity, etc.","name":"clear"},{"params":[],"desc":"Disable animation for the Translator.","name":"disable"},{"params":[],"desc":"Enable animation for the Translator.","name":"enable"},{"ret":{"type":"boolean","desc":"true if the Translator will start moving, false if it will not"},"params":[{"type":"THREE.Vector3","name":"delta","desc":"XYZ amount to translate"},{"type":"number","name":"time","desc":"number of seconds for the translation to take"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating that no other translations can be started until this one finishes"}],"desc":"Make the Translator translate the specified amount in the specified amount of time.","name":"move"},{"params":[{"type":"Object","name":"event","desc":"the render event"}],"desc":"Calculate the position of the Translator based on the acceleration and velocity.","name":"onRender"},{"params":[{"type":"THREE.Vector3","name":"acceleration","desc":"XYZ acceleration vector"}],"desc":"Set the acceleration.","name":"setAcceleration"},{"params":[{"type":"THREE.Vector3","name":"position","desc":"XYZ position"}],"desc":"Set the position.","name":"setPosition"},{"params":[{"type":"hemi.Transform","name":"transform","desc":"the Transform to translate"}],"desc":"Set the given Transform for the Translator to control translating.","name":"setTransform"},{"params":[{"type":"THREE.Vector3","name":"velocity","desc":"XYZ velocity vector"}],"desc":"Set the velocity.","name":"setVelocity"}],"props":[],"msgs":[],"desc":"A Translator provides easy setting of linear velocity and acceleration of Transforms.","name":"hemi.Translator"},{"funcs":[{"params":[{"type":"Object","name":"mouseEvent","desc":"the mouse down event"}],"desc":"Handle the mouse down event by performing a pick operation. If a 3D object is picked, send out a message on the dispach.","name":"onMouseDown"},{"ret":{"type":"Object","desc":"the removed grabber or null"},"params":[],"desc":"Remove the current 'pick grabber'. Allow pick messages to continue being passed to the other registered handlers.","name":"removePickGrabber"},{"params":[{"type":"Object","name":"grabber","desc":"an object that implements onPick()"}],"desc":"Register the given handler as the 'pick grabber'. The pick grabber intercepts pick messages and prevents them from being passed to other handlers. It should be used if the user enters an 'interaction mode' that overrides default behavior.","name":"setPickGrabber"}],"props":[],"msgs":[],"desc":"A Picker contains the logic for perfoming pick operations on 3D scenes from mouse clicks.","name":"hemi.Picker"},{"funcs":[{"params":[],"desc":"Create the actual geometry for the Shape.","name":"create"},{"params":[{"type":"number","name":"color","desc":"the new color (in hex)"}],"desc":"Set the color of the Shape.","name":"setColor"},{"params":[{"type":"string","name":"name","desc":"the new name"}],"desc":"Set the name for the Shape as well as its Mesh and geometry.","name":"setName"},{"params":[{"type":"number","name":"opacity","desc":"the new opacity (0 to 1)"}],"desc":"Set the opacity of the Shape.","name":"setOpacity"},{"params":[{"type":"string","name":"type","desc":"the new shape type"}],"desc":"Set the shape type of the Shape.","name":"setType"},{"params":[{"type":"number","name":"x","desc":"amount to translate in the x direction"},{"type":"number","name":"y","desc":"amount to translate in the y direction"},{"type":"number","name":"z","desc":"amount to translate in the z direction"}],"desc":"Convenience method for translating the mesh.","name":"translate"}],"props":[],"msgs":[],"desc":"A Shape is a wrapper class around basic geometric shapes such as cubes and spheres that allows them to interact with the World in complex ways.","name":"hemi.Shape"},{"funcs":[{"params":[{"type":"string","name":"path","desc":"the path to the image source"}],"desc":"Add an image to be used as a frame in the animation, or as a standalone image.","name":"addFrame"},{"params":[{"type":"Object","name":"e","desc":"render event"}],"desc":"Function to call on every render cycle. Scale or rotate the Sprite if needed, and update the frame if needed.","name":"onRender"},{"params":[{"type":"number","name":"opt_cycles","desc":"number of cycles, defaults to one loop through the frames"}],"desc":"Start the Sprite animating, for a set number of cycles, or pass in -1 for infinite looping.","name":"run"},{"params":[{"type":"number","name":"index","desc":"index of desired frame"}],"desc":"Set the Sprite to display one of its frames.","name":"setFrame"},{"params":[],"desc":"Stop the animating frames.","name":"stop"}],"props":[{"name":"client","desc":"The Client that the Sprite is being rendered by.","type":"hemi.Client"},{"name":"period","desc":"The period of time that each frame of the Sprite's animation will display, in seconds.","type":"number"}],"msgs":[],"desc":"A Sprite can display a 2d image on a plane with several options. The image can be made to always face the camera, and it can scale to stay the same size in the viewer. It can also cycle through a series of frames to create an animation effect, for a number of cycles or indefinitely.","name":"hemi.Sprite"},{"funcs":[{"params":[],"desc":"Remove all references in the State","name":"_clean"},{"params":[],"desc":"Load the State.","name":"load"},{"params":[],"desc":"Unload the State.","name":"unload"},{"params":[],"desc":"Unload the State and move to the next State (if it has been set).","name":"nextState"},{"params":[],"desc":"Unload the State and move to the previous State (if it has been set).","name":"previousState"},{"params":[],"desc":"Octane properties for State.","name":"_octane"},{"ret":{"type":"return (Object[]","desc":"Array of message types sent."},"params":[],"desc":"Message types sent by State.","name":"_msgSent"}],"props":[{"name":"isLoaded","desc":"Flag indicating if the State is currently loaded.","type":"boolean"},{"name":"next","desc":"The next State to move to after this one.","type":"hemi.State"},{"name":"prev","desc":"The previous State that occurred before this one.","type":"hemi.State"}],"msgs":[{"name":"load","desc":"the State is set as the \"current\" State"},{"name":"unload","desc":"the State is set to not be the \"current\" State"}],"desc":"A State represents a logical grouping of behavior, events, and interactions. It can be used to determine when various interactions are valid or if various events should be enabled.","name":"hemi.State"},{"funcs":[{"params":[{"type":"string","name":"name","desc":"the name of the Texture"},{"type":"THREE.Texture","name":"texture","desc":"the Texture"}],"desc":"Add the given Texture to the TextureSet.","name":"addLoadedTexture"},{"params":[{"type":"string","name":"name","desc":"the name for the texture"},{"type":"string","name":"url","desc":"the url of the image"}],"desc":"Load a Texture from the given file url into the TextureSet.","name":"addTexture"},{"ret":{"type":"THREE.Texture","desc":"the Texture"},"params":[{"type":"string","name":"name","desc":"the name the Texture was given when added"}],"desc":"Get the Texture with the given name in the TextureSet.","name":"getTexture"}],"props":[{"name":"count","desc":"The total number of loaded and not-yet-loaded Textures in the TextureSet.","type":"number"},{"name":"textures","desc":"An object that maps a given name for a Texture to its instance for easy access.","type":"Object"}],"msgs":[],"desc":"A TextureSet can manage Textures that are part of a set as defined by the user. It will handle loading them and notify the author upon completion.","name":"TextureSet"},{"funcs":[{"params":[],"desc":"Pause the Timer if it is currently running.","name":"pause"},{"params":[],"desc":"Reset the Timer so it is ready to count down again.","name":"reset"},{"params":[],"desc":"Resume the Timer's count down if it is currently paused.","name":"resume"},{"params":[],"desc":"Start the Timer's count down. If it is currently running, restart the Timer from its initial count down value.","name":"start"},{"params":[],"desc":"Stop the Timer if it is currently running or paused. This resets any currently elapsed time on the Timer.","name":"stop"}],"props":[{"name":"startTime","desc":"The time the timer will start counting down from (milliseconds).","type":"number"}],"msgs":[{"name":"start","desc":"the Timer starts counting down"},{"name":"stop","desc":"the Timer stops counting down"}],"desc":"A Timer is a simple countdown timer that can be used to script behavior and sequence events.","name":"hemi.Timer"},{"funcs":[{"params":[],"desc":"Cancel the current interaction that is enabled for the Transform (movable, resizable or turnable).","name":"cancelInteraction"},{"params":[],"desc":"Cancel any translating motion that is currently enabled for the Transform.","name":"cancelMoving"},{"params":[],"desc":"Cancel any scaling motion that is currently enabled for the Transform.","name":"cancelResizing"},{"params":[],"desc":"Cancel any rotating motion that is currently enabled for the Transform.","name":"cancelTurning"},{"ret":{"type":"THREE.Vector3","desc":"the current acceleration of the given motion type"},"params":[{"type":"hemi.MotionType","name":"type","desc":"the type of motion acceleration to get"},{"type":"THREE.Vector3","name":"opt_accel","desc":"optional vector to receive acceleration data"}],"desc":"Get the current acceleration of the given motion type for the Transform.","name":"getAcceleration"},{"ret":{"type":"hemi.Transform[]","desc":"array of all child/grandchild Transforms"},"params":[{"type":"hemi.Transform[]","name":"opt_arr","desc":"optional array to place Transforms in"}],"desc":"Get all of the child Transforms that are under the Transform.","name":"getAllChildren"},{"ret":{"type":"THREE.Vector3","desc":"the current velocity of the given motion type"},"params":[{"type":"hemi.MotionType","name":"type","desc":"the type of motion velocity to get"},{"type":"THREE.Vector3","name":"opt_vel","desc":"optional vector to receive velocity data"}],"desc":"Get the current velocity of the given motion type for the Transform.","name":"getVelocity"},{"params":[],"desc":"Set all of the Transform's properties to their identity values.","name":"identity"},{"ret":{"type":"boolean","desc":"true if the Transform will start moving, false if it will not"},"params":[{"type":"THREE.Vector3","name":"delta","desc":"XYZ amount to move the Transform by"},{"type":"number","name":"time","desc":"the amount of time for the motion to take (in seconds)"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating this move cannot be interrupted by a different move before it finishes"}],"desc":"Animate the Transform moving by the given amount over the given amount of time.","name":"move"},{"ret":{"type":"boolean","desc":"true if the Transform will start resizing, false if it will not"},"params":[{"type":"THREE.Vector3","name":"scale","desc":"XYZ amount to scale the Transform by"},{"type":"number","name":"time","desc":"the amount of time for the motion to take (in seconds)"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating this resize cannot be interrupted by a different resize before it finishes"}],"desc":"Animate the Transform resizing by the given amount over the given amount of time.","name":"resize"},{"params":[{"type":"string","name":"opt_plane","desc":"optional 2D plane to enable movement along (default is XZ)"},{"type":"number[4]","name":"opt_limits","desc":"optional array of movement limits within the plane: [min on u, max on u, min on v, max on v]"},{"type":"hemi.Transform[]","name":"opt_transforms","desc":"optional array of extra Transforms to make movable as one group with the Transform"}],"desc":"Allow the Transform to be moved (translated) through mouse interaction along the given plane.","name":"setMovable"},{"params":[{"type":"THREE.Vector3","name":"opt_velocity","desc":"optional XYZ velocity to set for moving"},{"type":"THREE.Vector3","name":"opt_acceleration","desc":"optional XYZ acceleration to set for moving"}],"desc":"Set the Transform to translate with the given velocity and/or acceleration.","name":"setMoving"},{"params":[{"type":"boolean","name":"pickable","desc":"flag indicating if the Transform should be pickable"},{"type":"boolean","name":"recurse","desc":"flag indicating if all child Transforms should also be set"}],"desc":"Set the pickable flag for the Transform and optionally all of its children.","name":"setPickable"},{"params":[{"type":"string","name":"opt_axis","desc":"optional axis to enable resizing along (default is Y)"},{"type":"hemi.Transform[]","name":"opt_transforms","desc":"optional array of extra Transforms to make resizable as one group with the Transform"}],"desc":"Allow the Transform to be resized (scaled) through mouse interaction along the given axis.","name":"setResizable"},{"params":[{"type":"THREE.Vector3","name":"opt_velocity","desc":"optional XYZ velocity to set for resizing"},{"type":"THREE.Vector3","name":"opt_acceleration","desc":"optional XYZ acceleration to set for resizing"}],"desc":"Set the Transform to scale with the given velocity and/or acceleration.","name":"setResizing"},{"params":[{"type":"string","name":"axis","desc":"optional axis to enable turning about (default is Y)"},{"type":"number[2]","name":"opt_limits","desc":"optional minimum and maximum angle limits (in radians)"},{"type":"hemi.Transform[]","name":"opt_transforms","desc":"optional array of extra Transforms to make turnable as one group with the Transform"}],"desc":"Allow the Transform to be turned (rotated) through mouse interaction about the given axis.","name":"setTurnable"},{"params":[{"type":"THREE.Vector3","name":"opt_velocity","desc":"optional XYZ velocity to set for turning (in radians)"},{"type":"THREE.Vector3","name":"opt_acceleration","desc":"optional XYZ acceleration to set for turning (in radians)"}],"desc":"Set the Transform to rotate with the given velocity and/or acceleration.","name":"setTurning"},{"params":[{"type":"boolean","name":"visible","desc":"flag indicating if the Transform should be visible"},{"type":"boolean","name":"recurse","desc":"flag indicating if all child Transforms should also be set"}],"desc":"Set the visible flag for the Transform and optionally all of its children.","name":"setVisible"},{"ret":{"type":"boolean","desc":"true if the Transform will start turning, false if it will not"},"params":[{"type":"THREE.Vector3","name":"delta","desc":"XYZ amount to turn the Transform by (in radians)"},{"type":"number","name":"time","desc":"the amount of time for the motion to take (in seconds)"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating this turn cannot be interrupted by a different turn before it finishes"}],"desc":"Animate the Transform turning by the given amount over the given amount of time.","name":"turn"}],"props":[{"name":"pickable","desc":"Flag indicating if the Transform should be pickable by mouse clicks.","type":"boolean"}],"msgs":[{"name":"move","desc":"the Transform has been moved"},{"name":"resize","desc":"the Transform has been resized"},{"name":"start","desc":"the Transform starts a motion"},{"name":"stop","desc":"the Transform finishes a motion"}],"desc":"A Transform performs hierarchical matrix transformations.","name":"hemi.Transform"},{"funcs":[{"params":[],"desc":"Cancel the current interaction that is enabled for the Mesh (movable, resizable or turnable).","name":"cancelInteraction"},{"params":[],"desc":"Cancel any translating motion that is currently enabled for the Mesh.","name":"cancelMoving"},{"params":[],"desc":"Cancel any scaling motion that is currently enabled for the Mesh.","name":"cancelResizing"},{"params":[],"desc":"Cancel any rotating motion that is currently enabled for the Mesh.","name":"cancelTurning"},{"ret":{"type":"THREE.Vector3","desc":"the current acceleration of the given motion type"},"params":[{"type":"hemi.MotionType","name":"type","desc":"the type of motion acceleration to get"},{"type":"THREE.Vector3","name":"opt_accel","desc":"optional vector to receive acceleration data"}],"desc":"Get the current acceleration of the given motion type for the Mesh.","name":"getAcceleration"},{"ret":{"type":"hemi.Transform[]","desc":"array of all child/grandchild Transforms"},"params":[{"type":"hemi.Transform[]","name":"opt_arr","desc":"optional array to place Transforms in"}],"desc":"Get all of the child Transforms that are under the Mesh.","name":"getAllChildren"},{"ret":{"type":"hemi.BoundingBox","desc":"the world-space bounding box"},"params":[],"desc":"Get the bounding box of the Mesh's geometry in world-space coordinates.","name":"getBoundingBox"},{"ret":{"type":"THREE.Vector3","desc":"the current velocity of the given motion type"},"params":[{"type":"hemi.MotionType","name":"type","desc":"the type of motion velocity to get"},{"type":"THREE.Vector3","name":"opt_vel","desc":"optional vector to receive velocity data"}],"desc":"Get the current velocity of the given motion type for the Mesh.","name":"getVelocity"},{"params":[],"desc":"Set all of the Transform's properties to their identity values.","name":"identity"},{"ret":{"type":"boolean","desc":"true if the Mesh will start moving, false if it will not"},"params":[{"type":"THREE.Vector3","name":"delta","desc":"XYZ amount to move the Mesh by"},{"type":"number","name":"time","desc":"the amount of time for the motion to take (in seconds)"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating this move cannot be interrupted by a different move before it finishes"}],"desc":"Animate the Mesh moving by the given amount over the given amount of time.","name":"move"},{"ret":{"type":"boolean","desc":"true if the Mesh will start resizing, false if it will not"},"params":[{"type":"THREE.Vector3","name":"scale","desc":"XYZ amount to scale the Mesh by"},{"type":"number","name":"time","desc":"the amount of time for the motion to take (in seconds)"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating this resize cannot be interrupted by a different resize before it finishes"}],"desc":"Animate the Mesh resizing by the given amount over the given amount of time.","name":"resize"},{"params":[{"type":"string","name":"plane","desc":"the 2D plane to enable movement along"},{"type":"number[4]","name":"opt_limits","desc":"optional array of movement limits within the plane: [min on u, max on u, min on v, max on v]"},{"type":"hemi.Transform[]","name":"opt_transforms","desc":"optional array of extra Transforms to make movable as one group with the Mesh"}],"desc":"Allow the Mesh to be moved (translated) through mouse interaction along the given plane.","name":"setMovable"},{"params":[{"type":"THREE.Vector3","name":"opt_velocity","desc":"optional XYZ velocity to set for moving"},{"type":"THREE.Vector3","name":"opt_acceleration","desc":"optional XYZ acceleration to set for moving"}],"desc":"Set the Mesh to translate with the given velocity and/or acceleration.","name":"setMoving"},{"params":[{"type":"boolean","name":"pickable","desc":"flag indicating if the Mesh should be pickable"},{"type":"boolean","name":"recurse","desc":"flag indicating if all child Transforms should also be set"}],"desc":"Set the pickable flag for the Mesh and optionally all of its children.","name":"setPickable"},{"params":[{"type":"string","name":"axis","desc":"the axis to enable resizing along"},{"type":"hemi.Transform[]","name":"opt_transforms","desc":"optional array of extra Transforms to make resizable as one group with the Mesh"}],"desc":"Allow the Mesh to be resized (scaled) through mouse interaction along the given axis.","name":"setResizable"},{"params":[{"type":"THREE.Vector3","name":"opt_velocity","desc":"optional XYZ velocity to set for resizing"},{"type":"THREE.Vector3","name":"opt_acceleration","desc":"optional XYZ acceleration to set for resizing"}],"desc":"Set the Mesh to scale with the given velocity and/or acceleration.","name":"setResizing"},{"params":[{"type":"string","name":"axis","desc":"the axis to enable turning about"},{"type":"number[2]","name":"opt_limits","desc":"optional minimum and maximum angle limits (in radians)"},{"type":"hemi.Transform[]","name":"opt_transforms","desc":"optional array of extra Transforms to make turnable as one group with the Mesh"}],"desc":"Allow the Mesh to be turned (rotated) through mouse interaction about the given axis.","name":"setTurnable"},{"params":[{"type":"THREE.Vector3","name":"opt_velocity","desc":"optional XYZ velocity to set for turning (in radians)"},{"type":"THREE.Vector3","name":"opt_acceleration","desc":"optional XYZ acceleration to set for turning (in radians)"}],"desc":"Set the Mesh to rotate with the given velocity and/or acceleration.","name":"setTurning"},{"params":[{"type":"boolean","name":"visible","desc":"flag indicating if the Mesh should be visible"},{"type":"boolean","name":"recurse","desc":"flag indicating if all child Transforms should also be set"}],"desc":"Set the visible flag for the Mesh and optionally all of its children.","name":"setVisible"},{"ret":{"type":"boolean","desc":"true if the Mesh will start turning, false if it will not"},"params":[{"type":"THREE.Vector3","name":"delta","desc":"XYZ amount to turn the Mesh by (in radians)"},{"type":"number","name":"time","desc":"the amount of time for the motion to take (in seconds)"},{"type":"boolean","name":"opt_mustComplete","desc":"optional flag indicating this turn cannot be interrupted by a different turn before it finishes"}],"desc":"Animate the Mesh turning by the given amount over the given amount of time.","name":"turn"}],"props":[{"name":"pickable","desc":"Flag indicating if the Mesh should be pickable by mouse clicks.","type":"boolean"}],"msgs":[{"name":"move","desc":"the Mesh has been moved"},{"name":"resize","desc":"the Mesh has been resized"},{"name":"start","desc":"the Mesh starts a motion"},{"name":"stop","desc":"the Mesh finishes a motion"}],"desc":"A Mesh performs hierarchical matrix transformations and contains geometry and rendering materials.","name":"hemi.Mesh"},{"funcs":[{"params":[{"type":"hemi.dispatch.Message","name":"message","desc":"the Message to handle"}],"desc":"Check the ValueCheck's value parameters against it's expected values to determine if the given Message should be passed to the handler object.","name":"handleMessage"}],"props":[{"name":"citizen","desc":"A Citizen that the ValueCheck may be using.","type":"hemi.world.Citizen"},{"name":"values","desc":"The values to check for.","type":"Object[]"},{"name":"valueParams","desc":"The parameter names to use to get the values to check.","type":"string[]"},{"name":"handler","desc":"The handler object for the Message.","type":"Object"},{"name":"func","desc":"The name of the object function to pass the Message to.","type":"string"},{"name":"args","desc":"Optional array to specify arguments to pass to the handler. Otherwise just pass it the Message.","type":"string[]"}],"msgs":[],"desc":"A ValueCheck handler checks a set of values against a specified set of values from the Message to handle. If the values all match, the Message is passed to the actual handler.","name":"hemi.ValueCheck"},{"funcs":[{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[],"desc":"Disable control of the Camera through the mouse and keyboard.","name":"disableControl"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[],"desc":"Disable the shiftkey scanning.","name":"disableScan"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[],"desc":"Disable the scroll wheel zooming.","name":"disableZoom"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[],"desc":"Enable control of the Camera through the mouse and keyboard.","name":"enableControl"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[],"desc":"Enable the shiftkey dragging.","name":"enableScan"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[],"desc":"Enable the camera to zoom with the mouse scroll.","name":"enableZoom"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[],"desc":"Fix the camera to its current spot, and use mouse movements to look around.","name":"fixEye"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[],"desc":"Allow the camera to rotate about a fixed target. This is the default mode.","name":"freeEye"},{"ret":{"type":"THREE.Vector3","desc":"XYZ coordinates of the eye"},"params":[{"type":"THREE.Vector3","name":"opt_vec","desc":"optional vector to receive eye position"}],"desc":"Get the current position of the Camera eye.","name":"getEye"},{"ret":{"type":"THREE.Vector3","desc":"XYZ coordinates of the target"},"params":[{"type":"THREE.Vector3","name":"opt_vec","desc":"optional vector to receive target position"}],"desc":"Get the current position of the Camera target.","name":"getTarget"},{"params":[{"type":"hemi.CameraCurve","name":"curve","desc":"curve for the Camera eye and target to follow"},{"type":"number","name":"opt_time","desc":"the number of seconds for the Camera to take to move alon gthe curve (0 is instant)"}],"desc":"Move the Camera along the specified curve.","name":"moveOnCurve"},{"params":[{"type":"hemi.Viewpoint","name":"view","desc":"Viewpoint to move to"},{"type":"number","name":"opt_time","desc":"the number of seconds for the Camera to take to move to the Viewpoint (0 is instant)"}],"desc":"Move the Camera to the given Viewpoint.","name":"moveToView"},{"params":[{"type":"Object","name":"keyEvent","desc":"key down event"}],"desc":"Keyboard key-down listener.","name":"onKeyDown"},{"params":[{"type":"Object","name":"keyEvent","desc":"key up event"}],"desc":"Keyboard key-up listener.","name":"onKeyUp"},{"params":[{"type":"Object","name":"mouseEvent","desc":"mouse down event"}],"desc":"Mouse-down listener - set parameters to reflect that fact.","name":"onMouseDown"},{"params":[{"type":"Object","name":"mouseEvent","desc":"mouse move event"}],"desc":"Mouse-move listener - move the camera if the mouse is down.","name":"onMouseMove"},{"params":[{"type":"Object","name":"mouseEvent","desc":"mouse up event"}],"desc":"Mouse-up listener.","name":"onMouseUp"},{"params":[{"type":"Object","name":"renderEvent","desc":"render event"}],"desc":"Render listener - check mouse and camera parameters and decide if the Camera needs to be updated.","name":"onRender"},{"params":[{"type":"Object","name":"mouseEvent","desc":"mouse wheel event"}],"desc":"Mouse-scroll listener - zoom the camera in or out.","name":"onScroll"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[{"type":"number","name":"pan","desc":"amount to pan around by (in radians)"},{"type":"number","name":"tilt","desc":"amount to tilt up and down by (in radians)"}],"desc":"Orbit the Camera about the target point it is currently looking at.","name":"orbit"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[{"type":"number","name":"pan","desc":"amount to pan (in radians)"},{"type":"number","name":"tilt","desc":"amount to tilt (in radians)"}],"desc":"Rotate the Camera in place so that it looks in a new direction. Note that this has no effect if the Camera is not in fixed-eye mode.","name":"rotate"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[{"type":"number","name":"panMin","desc":"minimum pan angle (in radians)"},{"type":"number","name":"panMax","desc":"maximum pan angle (in radians)"},{"type":"number","name":"tiltMin","desc":"minimum tilt angle (in radians)"},{"type":"number","name":"tiltMax","desc":"maximum tilt angle (in radians)"}],"desc":"Set the limits on the Camera pan and tilt in fixed eye mode.","name":"setLookAroundLimits"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[{"type":"function[]","name":"easeFunc","desc":"array of three functions which will be used for easing on the X, Y, and Z axes"}],"desc":"Set the function used to ease the Camera in and out of moves.","name":"setEasing"},{"params":[{"type":"THREE.Vector3","name":"eye","desc":"XYZ position of camera eye"},{"type":"THREE.Vector3","name":"target","desc":"XYZ position of camera target"}],"desc":"Set the eye and target of the Camera.","name":"setEyeTarget"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[{"type":"number[3]","name":"rgb","desc":"rgb value of the color"}],"desc":"Set the color of the Camera's light source.","name":"setLightColor"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[{"type":"hemi.Plane","name":"plane","desc":"the plane to look at orthographically (xy, xz, or yz)"}],"desc":"Set the Camera view to render with an orthographic projection.","name":"setOrthographic"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[],"desc":"Set the Camera view to render with a perspective projection.","name":"setPerspective"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[{"type":"number","name":"min","desc":"zoom-in limit (in radians)"},{"type":"number","name":"max","desc":"zoom-out limit (in radians)"}],"desc":"Set the zooming limits in fixed-eye mode.","name":"setZoomLimits"},{"ret":{"type":"hemi.Camera","desc":"this Camera (for easy chaining)"},"params":[{"type":"number","name":"distance","desc":"the distance to move the Camera"}],"desc":"Move the Camera towards or away from its current target point by the given distance.","name":"truck"},{"params":[],"desc":"Recursively update all world matrices of the Camera's transforms.","name":"updateWorldMatrices"}],"props":[{"name":"light","desc":"A light that moves with the Camera and is always pointing where the Camera is pointing.","type":"THREE.PointLight"}],"msgs":[{"name":"start","desc":"the Camera starts moving to a Viewpoint"},{"name":"stop","desc":"the Camera arrives at a Viewpoint"}],"desc":"A Camera controls the point of view and perspective when viewing a  3D scene.","name":"hemi.Camera"},{"funcs":[],"props":[],"msgs":[],"desc":"A CameraCurve contains an \"eye\" Curve and a \"target\" Curve that allow a Camera to follow a smooth path through several waypoints.","name":"hemi.CameraCurve"},{"funcs":[],"props":[],"msgs":[],"desc":"A ViewData is a light-weight, non-Citizen form of a Viewpoint.","name":"hemi.ViewData"},{"funcs":[{"ret":{"type":"hemi.ViewData","desc":"the ViewData for the Viewpoint"},"params":[],"desc":"Get the data contained within the Viewpoint.","name":"getData"},{"params":[{"type":"hemi.ViewData","name":"viewData","desc":"data to set for the Viewpoint"}],"desc":"Set the data for the Viewpoint.","name":"setData"}],"props":[],"msgs":[],"desc":"A Viewpoint describes everything needed for a view - eye, target, field of view, near plane, and far plane.","name":"hemi.Viewpoint"}]